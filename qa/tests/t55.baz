func inline exit(v:reg_rdi){
	mov(rax,60) # exit system call
	mov(rdi,v)  # return code
	syscall
}

type vector{x,y}
type object{pos:vector,vel:vector,color:byte,wrd:word,dwrd:dword}

func inline main{
	var obj:object=1
	if not obj.pos.x=1 exit(1)

#	var bt1:byte=obj.pos.x  # truncation error
	var bt2:byte=-2
	obj.pos.y=bt2
	
	if not obj.pos.y=-2 exit(4)
	if not obj.pos.y=bt2 exit(5)

	obj.color=bt2
	if not obj.color=-2 exit(6)
	if not obj.color=bt2 exit(7)

#	obj.color=257 # overflow

	bt2=obj.color
	if not bt2=obj.color exit(8)

	var w:word=-1
	obj.wrd=w
	if not obj.wrd=-1 exit(9)
	if not obj.wrd=w exit(10)
	
	obj.wrd=bt2
	if not obj.wrd=-2 exit(9)
	if not obj.wrd=bt2 exit(10)

	var dw:dword=-3
	obj.dwrd=dw
	if not obj.dwrd=-3 exit(11)
	if not obj.dwrd=dw exit(12)
	
	obj.dwrd=bt2
	if not obj.dwrd=-2 exit(9)
	if not obj.dwrd=bt2 exit(10)
	
	exit(0)
}
