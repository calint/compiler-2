func exit(v : reg_rdi) {
    mov(rax, 60)  # exit system call
    mov(rdi, v)   # return code
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

func print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall()
}

func read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes {
    mov(rax, 0)   # read system call
    mov(rdi, 0)   # file descriptor for standard input
    mov(rsi, ptr) # buffer address
    mov(rdx, len) # buffer size
    syscall()
    mov(nbytes, rax) # return value
}

type string {
    len,
    data : i8[64]
}

type location {
    name : string
}

func main() {
    var locations : location[4]

    var i = 0
    loop {
      locations[i].name.len = read(array_size_of(locations[i].name.data), address_of(locations[i].name.data))
      i = i + 1
      if i == 4 break
    }

    i = 0
    loop {
      print(locations[i].name.len, address_of(locations[i].name.data))
      i = i + 1
      if i == 4 break
    }
}
