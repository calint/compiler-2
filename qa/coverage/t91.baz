func exit(v : reg_rdi) {
    mov(rax, 60)  # exit system call
    mov(rdi, v)   # return code
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

func print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall()
}

func read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes {
    mov(rax, 0)   # read system call
    mov(rdi, 0)   # file descriptor for standard input
    mov(rsi, ptr) # buffer address
    mov(rdx, len) # buffer size
    syscall()
    mov(nbytes, rax) # return value
}

func print_num(num) {
    var buf : i8[20]
    var n = num
    var is_negative : bool = false
    
    if n < 0 {
        is_negative = true
        n = -n
    }
    
    var i = 20
    loop {
        i = i - 1
        var ascii = 48 + (n % 10)
        # note: not buf[i] = 48 + ... because expression will be executed as byte sized and n overflows
        buf[i] = ascii 
        n = n / 10
        if n == 0 break
    }
    
    if is_negative {
        i = i - 1
        buf[i] = 45
    }
    
    var write_pos = 0
    loop {
        buf[write_pos] = buf[i]
        write_pos = write_pos + 1
        i = i + 1
        if i == 20 break
    }
    
    print(write_pos, address_of(buf))
}

func main() {
  var nl : i8[1]
  nl[0] = 10

  var i1 = 123
  var i2 : i32 = 321
  var i3 : i16 = 420
  var i4 : i64 = 840
  var i5 = -1
  var i6 = 2147483647  
  var i7 = -2147483648

  print_num(i1)
  print(1, address_of(nl))
  print_num(i2)
  print(1, address_of(nl))
  print_num(i3)
  print(1, address_of(nl))
  print_num(i4)
  print(1, address_of(nl))
  print_num(i5)
  print(1, address_of(nl))
  print_num(i6)
  print(1, address_of(nl))
  print_num(i7)
  print(1, address_of(nl))
}
