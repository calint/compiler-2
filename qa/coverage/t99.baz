field ok = "ok\n"

func exit(v : reg_rdi) {
    mov(rax, 60)  # exit system call
    mov(rdi, v)   # return code
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

func print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall()
}

func read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes {
    mov(rax, 0)   # read system call
    mov(rdi, 0)   # file descriptor for standard input
    mov(rsi, ptr) # buffer address
    mov(rdx, len) # buffer size
    syscall()
    mov(nbytes, rax) # return value
}

func main() {
    var word1 : i8[64]
    var word2 : i8[64]
    
    print(ok.len, ok)

    # expect same word input for both
    var len1 = read(size_of(word1), address_of(word1))
    print(len1, address_of(word1))

    print(ok.len, ok)

    var len2 = read(size_of(word2), address_of(word2))
    print(len2, address_of(word2))
  
    assert(arrays_equal(word1, word2, len1))

    print(ok.len, ok)

    # expect not same word input for both
    len1 = read(size_of(word1), address_of(word1))
    print(len1, address_of(word1))

    print(ok.len, ok)
    
    len2 = read(size_of(word2), address_of(word2))
    print(len2, address_of(word2))
    
    assert(not arrays_equal(word1, word2, len1))

    print(ok.len, ok)
}
