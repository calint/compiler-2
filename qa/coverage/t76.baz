# note: A.I. generated by Claude 4.5 with minor changes

# Complex type tests for object and point types

func exit(v : reg_rdi) {
    mov(rax, 60)
    mov(rdi, v)
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

type point {x, y}
type object {pos : point, color : i32}

func main() {
    # Test 1: Basic point initialization and field access
    var p1 : point = {10, 20}
    assert(p1.x == 10)
    assert(p1.y == 20)

    # Test 2: Point with negative values
    var p2 : point = {-5, -15}
    assert(p2.x == -5)
    assert(p2.y == -15)
    
    # Test 3: Point with hex and binary values
    var p3 : point = {0xff, 0b1010}
    assert(p3.x == 255)
    assert(p3.y == 10)
    
    # Test 4: Point assignment
    var p4 : point = {1, 2}
    var p5 : point = p4
    assert(p5.x == 1)
    assert(p5.y == 2)
    
    # Test 5: Point field modification
    p4.x = 100
    p4.y = 200
    assert(p4.x == 100)
    assert(p4.y == 200)
    
    # Test 6: Point with expression initialization
    var a = 5
    var b = 3
    var p6 : point = {a + b, a * b}
    assert(p6.x == 8)
    assert(p6.y == 15)
    
    # Test 7: Basic object initialization
    var o1 : object = {{10, 20}, 0xff0000}
    assert(o1.pos.x == 10)
    assert(o1.pos.y == 20)
    assert(o1.color == 0xff0000)
    
    # Test 8: Object with nested point expressions
    var x = 7
    var y = 13
    var o2 : object = {{x * 2, y - 3}, 0x00ff00}
    assert(o2.pos.x == 14)
    assert(o2.pos.y == 10)
    assert(o2.color == 0x00ff00)
    
    # Test 9: Object assignment
    var o3 : object = o2
    assert(o3.pos.x == 14)
    assert(o3.pos.y == 10)
    assert(o3.color == 0x00ff00)
    
    # Test 10: Modifying object's nested point
    o3.pos.x = -50
    o3.pos.y = -100
    assert(o3.pos.x == -50)
    assert(o3.pos.y == -100)
    
    # Test 11: Replacing object's point field
    var new_point : point = {999, 888}
    o3.pos = new_point
    assert(o3.pos.x == 999)
    assert(o3.pos.y == 888)
    
    # Test 12: Object color modification
    o3.color = 0x0000ff
    assert(o3.color == 0x0000ff)
    
    # Test 13: Complex nested expression
    var m : i32 = 3
    var n : i32 = 4
    var o4 : object = {{m * m + n, n * n - m}, m * n * 0x1000}
    assert(o4.pos.x == 13)
    assert(o4.pos.y == 13)
    assert(o4.color == 0xc000)
    
    # Test 14: Zero-initialized types
    var p_zero : point = {0, 0}
    var o_zero : object = {{0, 0}, 0}
    assert(p_zero.x == 0)
    assert(p_zero.y == 0)
    assert(o_zero.pos.x == 0)
    assert(o_zero.pos.y == 0)
    assert(o_zero.color == 0)
    
    # Test 15: Maximum values
    var p_max : point = {0x7fffffff, 0x7fffffff}
    assert(p_max.x == 0x7fffffff)
    assert(p_max.y == 0x7fffffff)
    
    # Test 16: Multiple objects with different colors
    var red : object = {{0, 0}, 0xff0000}
    var green : object = {{10, 10}, 0x00ff00}
    var blue : object = {{20, 20}, 0x0000ff}
    assert(red.color == 0xff0000)
    assert(green.color == 0x00ff00)
    assert(blue.color == 0x0000ff)
    
    # Test 17: Chain assignment
    var p7 : point = {42, 84}
    var p8 : point = p7
    var p9 : point = p8
    assert(p9.x == 42)
    assert(p9.y == 84)
    
    # Test 18: Object field updates through intermediate variables
    var temp_x = 123
    var temp_y = 456
    var o5 : object = {{temp_x, temp_y}, 0xabcdef}
    temp_x = 789
    assert(o5.pos.x == 123)  # Should not change
    o5.pos.x = temp_x
    assert(o5.pos.x == 789)
    
    # Test 19: Complex color values
    var o6 : object = {{1, 1}, 0xffffff}
    var o7 : object = {{2, 2}, 0x123456}
    var o8 : object = {{3, 3}, 0xdeadbe}
    assert(o6.color == 0xffffff)
    assert(o7.color == 0x123456)
    assert(o8.color == 0xdeadbe)
    
    # Test 20: Point with arithmetic operations
    var base = 10
    var p10 : point = {base + 5, base * 3}
    assert(p10.x == 15)
    assert(p10.y == 30)
    p10.x = p10.x * 2
    p10.y = p10.y / 3
    assert(p10.x == 30)
    assert(p10.y == 10)
    
    # Test 21: Object array-like pattern
    var o_arr1 : object = {{0, 0}, 0x111111}
    var o_arr2 : object = {{1, 1}, 0x222222}
    var o_arr3 : object = {{2, 2}, 0x333333}
    assert(o_arr1.pos.x == 0)
    assert(o_arr2.pos.x == 1)
    assert(o_arr3.pos.x == 2)
    
    # Test 22: Nested modification chains
    var o9 : object = {{100, 200}, 0x500000}
    o9.pos.x = o9.pos.y / 2
    assert(o9.pos.x == 100)
    o9.pos.y = o9.pos.x + 50
    assert(o9.pos.y == 150)
    
    # Test 23: Mixed positive and negative in object
    var o10 : object = {{-10, 10}, 0xf0f0f0}
    assert(o10.pos.x == -10)
    assert(o10.pos.y == 10)
    o10.pos.x = -o10.pos.x
    assert(o10.pos.x == 10)
    
    # Test 24: Color bit operations
    var c1 : i32 = 0xff
    var c2 : i32 = 0xff00
    var c3 : i32 = 0xff0000
    var o11 : object = {{0, 0}, c1 + c2 + c3}
    assert(o11.color == 0xffffff)
    
    # Test 25: Extreme point coordinates
    var p11 : point = {-0x1000000, 0x1000000}
    assert(p11.x == -0x1000000)
    assert(p11.y == 0x1000000)
}
