func exit(v : reg_rdi) {
    mov(rax, 60)
    mov(rdi, v)
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

type vec3 { x : i32, y : i32, z : i32 }
type color { r : i32, g : i32, b : i32, a : i32 }

type vertex {
    pos : vec3,
    col : color,
    uv_x : i32,
    uv_y : i32
}

type mesh {
    vertices : vertex[16],
    indices : i32[24],
    id : i32
}

type scene {
    meshes : mesh[4],
    active : i32
}

type world {
    scenes : scene[3],
    metadata : i8[32]
}

func init_vertex(v : vertex, idx : i32) {
    v.pos.x = idx * 11
    v.pos.y = idx * 22
    v.pos.z = idx * 33
    v.col.r = idx * 2
    v.col.g = idx * 3
    v.col.b = idx * 4
    v.col.a = idx * 5
    v.uv_x = idx
    v.uv_y = idx * 2
}

func verify_vertex(v : vertex, idx : i32) {
    assert(v.pos.x == idx * 11)
    assert(v.pos.y == idx * 22)
    assert(v.pos.z == idx * 33)
    assert(v.col.r == idx * 2)
    assert(v.col.g == idx * 3)
    assert(v.col.b == idx * 4)
    assert(v.col.a == idx * 5)
    assert(v.uv_x == idx)
    assert(v.uv_y == idx * 2)
}

func init_mesh(m : mesh, id_val : i32) {
    m.id = id_val
    
    var i = 0
    loop {
        init_vertex(m.vertices[i], i)
        i = i + 1
        if i == 16 break
    }
    
    i = 0
    loop {
        m.indices[i] = i * 2
        i = i + 1
        if i == 24 break
    }
}

func verify_mesh(m : mesh, id_val : i32) {
    assert(m.id == id_val)
    
    var i = 0
    loop {
        verify_vertex(m.vertices[i], i)
        i = i + 1
        if i == 16 break
    }
    
    i = 0
    loop {
        assert(m.indices[i] == i * 2)
        i = i + 1
        if i == 24 break
    }
}

func scale_vertices(s : scene, scale_factor : i32) {
    var i = 0
    loop {
        var j = 0
        loop {
            s.meshes[i].vertices[j].pos.x = s.meshes[i].vertices[j].pos.x * scale_factor
            s.meshes[i].vertices[j].pos.y = s.meshes[i].vertices[j].pos.y * scale_factor
            s.meshes[i].vertices[j].pos.z = s.meshes[i].vertices[j].pos.z * scale_factor
            j = j + 1
            if j == 16 break
        }
        i = i + 1
        if i == 4 break
    }
}

func shift_colors(s : scene, shift_val : i32) {
    var i = 0
    loop {
        var j = 0
        loop {
            s.meshes[i].vertices[j].col.r = s.meshes[i].vertices[j].col.r + shift_val
            s.meshes[i].vertices[j].col.g = s.meshes[i].vertices[j].col.g + shift_val
            s.meshes[i].vertices[j].col.b = s.meshes[i].vertices[j].col.b + shift_val
            j = j + 1
            if j == 16 break
        }
        i = i + 1
        if i == 4 break
    }
}

func print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall()
}

func print_num(num) {
    var buf : i8[20]
    var n = num
    var is_negative : bool = false
    
    if n < 0 {
        is_negative = true
        n = -n
    }
    
    var i = 20
    loop {
        i = i - 1
        buf[i] = 48 + (n % 10)
        n = n / 10
        if n == 0 break
    }
    
    if is_negative {
        i = i - 1
        buf[i] = 45
    }
    
    var write_pos = 0
    loop {
        buf[write_pos] = buf[i]
        write_pos = write_pos + 1
        i = i + 1
        if i == 20 break
    }
    
    print(write_pos, address_of(buf))
}

func main() {
    var w : world[2]
    
    # TEST 1: Deep nested struct array initialization and verification
    var i = 0
    loop {
        var j = 0
        loop {
            var k = 0
            loop {
                init_mesh(w[0].scenes[j].meshes[k], j * 100 + k)
                k = k + 1
                if k == 4 break
            }
            j = j + 1
            if j == 3 break
        }
        i = i + 1
        if i == 1 break
    }
    
    # Verify all initialized correctly
    verify_mesh(w[0].scenes[0].meshes[0], 0)
    verify_mesh(w[0].scenes[0].meshes[3], 3)
    verify_mesh(w[0].scenes[1].meshes[2], 102)
    verify_mesh(w[0].scenes[2].meshes[3], 203)
    
    # TEST 2: Complex nested field modification
    w[0].scenes[1].meshes[2].vertices[7].pos.x = 0xdead
    w[0].scenes[1].meshes[2].vertices[7].pos.y = 0xbeef
    w[0].scenes[1].meshes[2].vertices[7].col.r = 0xff
    w[0].scenes[1].meshes[2].vertices[7].col.a = 0xaa
    
    assert(w[0].scenes[1].meshes[2].vertices[7].pos.x == 0xdead)
    assert(w[0].scenes[1].meshes[2].vertices[7].pos.y == 0xbeef)
    assert(w[0].scenes[1].meshes[2].vertices[7].col.r == 0xff)
    assert(w[0].scenes[1].meshes[2].vertices[7].col.a == 0xaa)
    
    # TEST 3: array_copy with deeply nested struct arrays
    array_copy(
        w[0].scenes[0].meshes,
        w[1].scenes[2].meshes,
        array_size_of(w[0].scenes[0].meshes)
    )

    # Verify copy
    verify_mesh(w[1].scenes[2].meshes[0], 0)
    verify_mesh(w[1].scenes[2].meshes[3], 3)
    
    # TEST 4: arrays_equal on complex nested vertex arrays
    var eq1 : bool = arrays_equal(
        w[0].scenes[0].meshes[2].vertices,
        w[1].scenes[2].meshes[2].vertices,
        array_size_of(w[0].scenes[0].meshes[2].vertices)
    )
    assert(eq1)
    
    # TEST 5: Partial array_copy on nested mesh indices
    array_copy(
        w[0].scenes[1].meshes[1].indices,
        w[0].scenes[2].meshes[0].indices,
        12
    )
    
    var idx = 0
    loop {
        assert(w[0].scenes[2].meshes[0].indices[idx] == idx * 2)
        idx = idx + 1
        if idx == 12 break
    }
    
    # TEST 6: Multiple levels of array indexing with arithmetic
    var mesh_idx = 1
    var vertex_idx = 5
    w[0].scenes[0].meshes[mesh_idx].vertices[vertex_idx].pos.z = 0x1234
    assert(w[0].scenes[0].meshes[1].vertices[5].pos.z == 0x1234)
}
