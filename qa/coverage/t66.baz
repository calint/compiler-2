func inline exit(v : reg_rdi) {
    mov(rax, 60)  # exit system call
    mov(rdi, v)   # return code
    syscall
}

func assert(expr : bool) {
    if not expr exit(1)
}

type vector {x, y : i32, z : i16, w : i8}

type object { pos : vector, vel : vector, valid : bool }

func inline main {
    var a : i32 = 10
    var pos : vector = {a, a + 1, 12, 13}
    assert(pos.x == 10)
    assert(pos.y == 11)
    assert(pos.z == 12)
    assert(pos.w == 13)

    var obj : object = {{a + a, 2, 3, 4}, {5, 6, 7, 8}, true}
    assert(obj.pos.x == 20)
    assert(obj.pos.y == 2)
    assert(obj.pos.z == 3)
    assert(obj.pos.w == 4)
    assert(obj.vel.x == 5)
    assert(obj.vel.y == 6)
    assert(obj.vel.z == 7)
    assert(obj.vel.w == 8)
    assert(obj.valid == true)
}
