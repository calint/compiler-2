;
; generated by baz
;

DEFAULT REL

section .bss
stk resd 65536
stk.end:

true equ 1
false equ 0

section .data

section .text
bits 64
global _start
_start:
mov rsp,stk.end
;
; program
;
main:
;   [10:5] var x = 1
;   [10:9] x: i64 (8B @ qword [rsp - 8])
;   [10:9] x = 1
;   [10:13] 1
    mov qword [rsp - 8], 1
;   [11:5] var y = 2
;   [11:9] y: i64 (8B @ qword [rsp - 16])
;   [11:9] y = 2
;   [11:13] 2
    mov qword [rsp - 16], 2
;   [13:5] var b : bool
;   [13:9] b: bool (1B @ byte [rsp - 17])
;   [13:9] clear 1 * 1B = 1B
;   [13:5] size <= 32B, use mov
    mov byte [rsp - 17], 0
;   [15:5] b = x == 1
;   [15:9] ? x == 1
;   [15:9] ? x == 1
    cmp_15_9:
    cmp qword [rsp - 8], 1
    sete byte [rsp - 17]
    jne bool_end_15_9
    jmp bool_end_15_9
    bool_end_15_9:
    if_17_7:
;   [17:7] ? (b)
    cmp_17_7:
;   [17:7] ? (b)
;   [17:8] ? b
    cmp_17_8:
    cmp byte [rsp - 17], false
    je if_17_5_end
    jmp if_17_7_code
    if_17_7_code:
;       [17:11] exit(0)
;       [17:16] allocate named register 'rdi'
        mov rdi, 0
;       [1:6] exit(v : reg_rdi) 
        exit_17_11:
;           [17:11] alias v -> rdi  (lea: )
;           [2:5] mov(rax, 60)
;               [2:14] 60
                mov rax, 60
;           [2:19] # exit system call
;           [3:5] mov(rdi, v)
;               [3:14] v
;           [3:19] # return code
;           [4:5] syscall()
            syscall
;           [17:11] free named register 'rdi'
        exit_17_11_end:
    if_17_5_end:
;   [18:5] assert(b)
;   [18:12] allocate scratch register -> r15
;   [18:12] ? b
;   [18:12] ? b
    cmp_18_12:
    cmp byte [rsp - 17], false
    setne r15b
    je bool_end_18_12
    jmp bool_end_18_12
    bool_end_18_12:
;   [7:6] assert(expr : bool) 
    assert_18_5:
;       [18:5] alias expr -> r15b  (lea: )
        if_7_29_18_5:
;       [7:29] ? not expr
;       [7:29] ? not expr
        cmp_7_29_18_5:
        cmp r15b, false
        jne if_7_26_18_5_end
        jmp if_7_29_18_5_code
        if_7_29_18_5_code:
;           [7:38] exit(1)
;           [7:43] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_7_38_18_5:
;               [7:38] alias v -> rdi  (lea: )
;               [2:5] mov(rax, 60)
;                   [2:14] 60
                    mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;                   [3:14] v
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [7:38] free named register 'rdi'
            exit_7_38_18_5_end:
        if_7_26_18_5_end:
;       [18:5] free scratch register 'r15'
    assert_18_5_end:
;   [20:5] b = x
;   [20:9] ? x
;   [20:9] ? x
    cmp_20_9:
    cmp qword [rsp - 8], false
    setne byte [rsp - 17]
    je bool_end_20_9
    jmp bool_end_20_9
    bool_end_20_9:
;   [21:5] assert(b)
;   [21:12] allocate scratch register -> r15
;   [21:12] ? b
;   [21:12] ? b
    cmp_21_12:
    cmp byte [rsp - 17], false
    setne r15b
    je bool_end_21_12
    jmp bool_end_21_12
    bool_end_21_12:
;   [7:6] assert(expr : bool) 
    assert_21_5:
;       [21:5] alias expr -> r15b  (lea: )
        if_7_29_21_5:
;       [7:29] ? not expr
;       [7:29] ? not expr
        cmp_7_29_21_5:
        cmp r15b, false
        jne if_7_26_21_5_end
        jmp if_7_29_21_5_code
        if_7_29_21_5_code:
;           [7:38] exit(1)
;           [7:43] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_7_38_21_5:
;               [7:38] alias v -> rdi  (lea: )
;               [2:5] mov(rax, 60)
;                   [2:14] 60
                    mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;                   [3:14] v
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [7:38] free named register 'rdi'
            exit_7_38_21_5_end:
        if_7_26_21_5_end:
;       [21:5] free scratch register 'r15'
    assert_21_5_end:
;   [23:5] b = x == 1 and y == 2
;   [23:9] ? x == 1 and y == 2
;   [23:9] ? x == 1
    cmp_23_9:
    cmp qword [rsp - 8], 1
    sete byte [rsp - 17]
    jne bool_end_23_9
;   [23:20] ? y == 2
    cmp_23_20:
    cmp qword [rsp - 16], 2
    sete byte [rsp - 17]
    jne bool_end_23_9
    jmp bool_end_23_9
    bool_end_23_9:
;   [24:5] assert(b)
;   [24:12] allocate scratch register -> r15
;   [24:12] ? b
;   [24:12] ? b
    cmp_24_12:
    cmp byte [rsp - 17], false
    setne r15b
    je bool_end_24_12
    jmp bool_end_24_12
    bool_end_24_12:
;   [7:6] assert(expr : bool) 
    assert_24_5:
;       [24:5] alias expr -> r15b  (lea: )
        if_7_29_24_5:
;       [7:29] ? not expr
;       [7:29] ? not expr
        cmp_7_29_24_5:
        cmp r15b, false
        jne if_7_26_24_5_end
        jmp if_7_29_24_5_code
        if_7_29_24_5_code:
;           [7:38] exit(1)
;           [7:43] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_7_38_24_5:
;               [7:38] alias v -> rdi  (lea: )
;               [2:5] mov(rax, 60)
;                   [2:14] 60
                    mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;                   [3:14] v
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [7:38] free named register 'rdi'
            exit_7_38_24_5_end:
        if_7_26_24_5_end:
;       [24:5] free scratch register 'r15'
    assert_24_5_end:
;   [26:5] b = x == 1 or y == 2
;   [26:9] ? x == 1 or y == 2
;   [26:9] ? x == 1
    cmp_26_9:
    cmp qword [rsp - 8], 1
    sete byte [rsp - 17]
    je bool_end_26_9
;   [26:19] ? y == 2
    cmp_26_19:
    cmp qword [rsp - 16], 2
    sete byte [rsp - 17]
    jne bool_end_26_9
    jmp bool_end_26_9
    bool_end_26_9:
;   [27:5] assert(b)
;   [27:12] allocate scratch register -> r15
;   [27:12] ? b
;   [27:12] ? b
    cmp_27_12:
    cmp byte [rsp - 17], false
    setne r15b
    je bool_end_27_12
    jmp bool_end_27_12
    bool_end_27_12:
;   [7:6] assert(expr : bool) 
    assert_27_5:
;       [27:5] alias expr -> r15b  (lea: )
        if_7_29_27_5:
;       [7:29] ? not expr
;       [7:29] ? not expr
        cmp_7_29_27_5:
        cmp r15b, false
        jne if_7_26_27_5_end
        jmp if_7_29_27_5_code
        if_7_29_27_5_code:
;           [7:38] exit(1)
;           [7:43] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_7_38_27_5:
;               [7:38] alias v -> rdi  (lea: )
;               [2:5] mov(rax, 60)
;                   [2:14] 60
                    mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;                   [3:14] v
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [7:38] free named register 'rdi'
            exit_7_38_27_5_end:
        if_7_26_27_5_end:
;       [27:5] free scratch register 'r15'
    assert_27_5_end:
    ; system call: exit 0
    mov rax, 60
    mov rdi, 0
    syscall


; max scratch registers in use: 1
;            max frames in use: 7
;               max stack size: 17B
