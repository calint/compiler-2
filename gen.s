;
; generated by baz
;

DEFAULT REL

section .bss
stk resd 131072
stk.end:

true equ 1
false equ 0

section .data

section .text
bits 64
global _start
_start:
mov rsp,stk.end
; program
main:
;   [63:3] var nl : i8[1]
;   [63:7] nl: i8[1] @ byte [rsp - 1]
;   [63:7] clear array 1 * 1 B = 1 B
;   [63:3] allocate named register 'rdi'
;   [63:3] allocate named register 'rcx'
;   [63:3] allocate named register 'rax'
    lea rdi, [rsp - 1]
    mov rcx, 1
    xor rax, rax
    rep stosb
;   [63:3] free named register 'rax'
;   [63:3] free named register 'rcx'
;   [63:3] free named register 'rdi'
;   [64:3] nl[0] = 10
;   [64:3] allocate scratch register -> r15
;   [64:6] set array index
;   [64:6] 0
;   [64:6] 0
;   [64:6] 0
    mov r15, 0
;   [64:6] bounds check
    cmp r15, 1
;   [64:6] allocate scratch register -> r14
;   [64:6] line number
    mov r14, 64
    cmovge rbp, r14
;   [64:6] free scratch register 'r14'
    jge panic_bounds
;   [64:11] 10
;   [64:11] 10
;   [64:11] 10
    mov byte [rsp + r15 - 1], 10
;   [64:3] free scratch register 'r15'
;   [66:3] var i1 = 123
;   [66:7] i1: i64 @ qword [rsp - 9]
;   [66:7] i1 =123
;   [66:12] 123
;   [66:12] 123
;   [66:12] 123
    mov qword [rsp - 9], 123
;   [67:3] var i2 : i32 = 321
;   [67:7] i2: i32 @ dword [rsp - 13]
;   [67:7] i2 =321
;   [67:18] 321
;   [67:18] 321
;   [67:18] 321
    mov dword [rsp - 13], 321
;   [68:3] var i3 : i16 = 420
;   [68:7] i3: i16 @ word [rsp - 15]
;   [68:7] i3 =420
;   [68:18] 420
;   [68:18] 420
;   [68:18] 420
    mov word [rsp - 15], 420
;   [69:3] var i4 : i64 = 840
;   [69:7] i4: i64 @ qword [rsp - 23]
;   [69:7] i4 =840
;   [69:18] 840
;   [69:18] 840
;   [69:18] 840
    mov qword [rsp - 23], 840
;   [70:3] var i5 = -1
;   [70:7] i5: i64 @ qword [rsp - 31]
;   [70:7] i5 =-1
;   [70:12] -1
;   [70:12] -1
;   [70:13] -1
    mov qword [rsp - 31], -1
;   [71:3] var i6 = 2147483647
;   [71:7] i6: i64 @ qword [rsp - 39]
;   [71:7] i6 =2147483647
;   [71:12] 2147483647
;   [71:12] 2147483647
;   [71:12] 2147483647
    mov qword [rsp - 39], 2147483647
;   [72:3] var i7 = -2147483648
;   [72:7] i7: i64 @ qword [rsp - 47]
;   [72:7] i7 =-2147483648
;   [72:12] -2147483648
;   [72:12] -2147483648
;   [72:13] -2147483648
    mov qword [rsp - 47], -2147483648
;   [74:3] print_num(i1)
;   [28:6] print_num(num) 
    print_num_74_3:
;       [74:3] alias num -> i1  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        mov r15, qword [rsp - 9]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_74_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_74_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_74_3_end
        jmp if_33_8_74_3_code
        if_33_8_74_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_74_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_74_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_74_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_74_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_74_3_end
            jmp if_43_12_74_3_code
            if_43_12_74_3_code:
;               [43:19] break
                jmp loop_39_5_74_3_end
            if_43_9_74_3_end:
        jmp loop_39_5_74_3
        loop_39_5_74_3_end:
        if_46_8_74_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_74_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_74_3_end
        jmp if_46_8_74_3_code
        if_46_8_74_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_74_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_74_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_74_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_74_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_74_3_end
            jmp if_56_12_74_3_code
            if_56_12_74_3_code:
;               [56:20] break
                jmp loop_52_5_74_3_end
            if_56_9_74_3_end:
        jmp loop_52_5_74_3
        loop_52_5_74_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_74_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_74_3_end:
    print_num_74_3_end:
;   [75:3] print(1, address_of(nl))
;   [75:9] allocate named register 'rdx'
    mov rdx, 1
;   [75:12] allocate named register 'rsi'
;   [75:12] address_of(nl)
;   [75:12] address_of(nl)
;   [75:12] rsi = address_of(nl)
;   [75:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_75_3:
;       [75:3] alias len -> rdx  (lea: , len: 0)
;       [75:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [75:3] free named register 'rsi'
;       [75:3] free named register 'rdx'
    print_75_3_end:
;   [76:3] print_num(i2)
;   [28:6] print_num(num) 
    print_num_76_3:
;       [76:3] alias num -> i2  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        movsx r15, dword [rsp - 13]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_76_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_76_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_76_3_end
        jmp if_33_8_76_3_code
        if_33_8_76_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_76_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_76_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_76_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_76_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_76_3_end
            jmp if_43_12_76_3_code
            if_43_12_76_3_code:
;               [43:19] break
                jmp loop_39_5_76_3_end
            if_43_9_76_3_end:
        jmp loop_39_5_76_3
        loop_39_5_76_3_end:
        if_46_8_76_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_76_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_76_3_end
        jmp if_46_8_76_3_code
        if_46_8_76_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_76_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_76_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_76_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_76_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_76_3_end
            jmp if_56_12_76_3_code
            if_56_12_76_3_code:
;               [56:20] break
                jmp loop_52_5_76_3_end
            if_56_9_76_3_end:
        jmp loop_52_5_76_3
        loop_52_5_76_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_76_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_76_3_end:
    print_num_76_3_end:
;   [77:3] print(1, address_of(nl))
;   [77:9] allocate named register 'rdx'
    mov rdx, 1
;   [77:12] allocate named register 'rsi'
;   [77:12] address_of(nl)
;   [77:12] address_of(nl)
;   [77:12] rsi = address_of(nl)
;   [77:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_77_3:
;       [77:3] alias len -> rdx  (lea: , len: 0)
;       [77:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [77:3] free named register 'rsi'
;       [77:3] free named register 'rdx'
    print_77_3_end:
;   [78:3] print_num(i3)
;   [28:6] print_num(num) 
    print_num_78_3:
;       [78:3] alias num -> i3  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        movsx r15, word [rsp - 15]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_78_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_78_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_78_3_end
        jmp if_33_8_78_3_code
        if_33_8_78_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_78_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_78_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_78_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_78_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_78_3_end
            jmp if_43_12_78_3_code
            if_43_12_78_3_code:
;               [43:19] break
                jmp loop_39_5_78_3_end
            if_43_9_78_3_end:
        jmp loop_39_5_78_3
        loop_39_5_78_3_end:
        if_46_8_78_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_78_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_78_3_end
        jmp if_46_8_78_3_code
        if_46_8_78_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_78_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_78_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_78_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_78_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_78_3_end
            jmp if_56_12_78_3_code
            if_56_12_78_3_code:
;               [56:20] break
                jmp loop_52_5_78_3_end
            if_56_9_78_3_end:
        jmp loop_52_5_78_3
        loop_52_5_78_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_78_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_78_3_end:
    print_num_78_3_end:
;   [79:3] print(1, address_of(nl))
;   [79:9] allocate named register 'rdx'
    mov rdx, 1
;   [79:12] allocate named register 'rsi'
;   [79:12] address_of(nl)
;   [79:12] address_of(nl)
;   [79:12] rsi = address_of(nl)
;   [79:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_79_3:
;       [79:3] alias len -> rdx  (lea: , len: 0)
;       [79:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [79:3] free named register 'rsi'
;       [79:3] free named register 'rdx'
    print_79_3_end:
;   [80:3] print_num(i4)
;   [28:6] print_num(num) 
    print_num_80_3:
;       [80:3] alias num -> i4  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        mov r15, qword [rsp - 23]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_80_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_80_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_80_3_end
        jmp if_33_8_80_3_code
        if_33_8_80_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_80_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_80_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_80_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_80_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_80_3_end
            jmp if_43_12_80_3_code
            if_43_12_80_3_code:
;               [43:19] break
                jmp loop_39_5_80_3_end
            if_43_9_80_3_end:
        jmp loop_39_5_80_3
        loop_39_5_80_3_end:
        if_46_8_80_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_80_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_80_3_end
        jmp if_46_8_80_3_code
        if_46_8_80_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_80_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_80_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_80_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_80_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_80_3_end
            jmp if_56_12_80_3_code
            if_56_12_80_3_code:
;               [56:20] break
                jmp loop_52_5_80_3_end
            if_56_9_80_3_end:
        jmp loop_52_5_80_3
        loop_52_5_80_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_80_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_80_3_end:
    print_num_80_3_end:
;   [81:3] print(1, address_of(nl))
;   [81:9] allocate named register 'rdx'
    mov rdx, 1
;   [81:12] allocate named register 'rsi'
;   [81:12] address_of(nl)
;   [81:12] address_of(nl)
;   [81:12] rsi = address_of(nl)
;   [81:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_81_3:
;       [81:3] alias len -> rdx  (lea: , len: 0)
;       [81:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [81:3] free named register 'rsi'
;       [81:3] free named register 'rdx'
    print_81_3_end:
;   [82:3] print_num(i5)
;   [28:6] print_num(num) 
    print_num_82_3:
;       [82:3] alias num -> i5  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        mov r15, qword [rsp - 31]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_82_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_82_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_82_3_end
        jmp if_33_8_82_3_code
        if_33_8_82_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_82_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_82_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_82_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_82_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_82_3_end
            jmp if_43_12_82_3_code
            if_43_12_82_3_code:
;               [43:19] break
                jmp loop_39_5_82_3_end
            if_43_9_82_3_end:
        jmp loop_39_5_82_3
        loop_39_5_82_3_end:
        if_46_8_82_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_82_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_82_3_end
        jmp if_46_8_82_3_code
        if_46_8_82_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_82_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_82_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_82_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_82_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_82_3_end
            jmp if_56_12_82_3_code
            if_56_12_82_3_code:
;               [56:20] break
                jmp loop_52_5_82_3_end
            if_56_9_82_3_end:
        jmp loop_52_5_82_3
        loop_52_5_82_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_82_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_82_3_end:
    print_num_82_3_end:
;   [83:3] print(1, address_of(nl))
;   [83:9] allocate named register 'rdx'
    mov rdx, 1
;   [83:12] allocate named register 'rsi'
;   [83:12] address_of(nl)
;   [83:12] address_of(nl)
;   [83:12] rsi = address_of(nl)
;   [83:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_83_3:
;       [83:3] alias len -> rdx  (lea: , len: 0)
;       [83:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [83:3] free named register 'rsi'
;       [83:3] free named register 'rdx'
    print_83_3_end:
;   [84:3] print_num(i6)
;   [28:6] print_num(num) 
    print_num_84_3:
;       [84:3] alias num -> i6  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        mov r15, qword [rsp - 39]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_84_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_84_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_84_3_end
        jmp if_33_8_84_3_code
        if_33_8_84_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_84_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_84_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_84_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_84_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_84_3_end
            jmp if_43_12_84_3_code
            if_43_12_84_3_code:
;               [43:19] break
                jmp loop_39_5_84_3_end
            if_43_9_84_3_end:
        jmp loop_39_5_84_3
        loop_39_5_84_3_end:
        if_46_8_84_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_84_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_84_3_end
        jmp if_46_8_84_3_code
        if_46_8_84_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_84_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_84_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_84_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_84_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_84_3_end
            jmp if_56_12_84_3_code
            if_56_12_84_3_code:
;               [56:20] break
                jmp loop_52_5_84_3_end
            if_56_9_84_3_end:
        jmp loop_52_5_84_3
        loop_52_5_84_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_84_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_84_3_end:
    print_num_84_3_end:
;   [85:3] print(1, address_of(nl))
;   [85:9] allocate named register 'rdx'
    mov rdx, 1
;   [85:12] allocate named register 'rsi'
;   [85:12] address_of(nl)
;   [85:12] address_of(nl)
;   [85:12] rsi = address_of(nl)
;   [85:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_85_3:
;       [85:3] alias len -> rdx  (lea: , len: 0)
;       [85:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [85:3] free named register 'rsi'
;       [85:3] free named register 'rdx'
    print_85_3_end:
;   [86:3] print_num(i7)
;   [28:6] print_num(num) 
    print_num_86_3:
;       [86:3] alias num -> i7  (lea: , len: 0)
;       [29:5] var buf : i8[20]
;       [29:9] buf: i8[20] @ byte [rsp - 67]
;       [29:9] clear array 20 * 1 B = 20 B
;       [29:5] allocate named register 'rdi'
;       [29:5] allocate named register 'rcx'
;       [29:5] allocate named register 'rax'
        lea rdi, [rsp - 67]
        mov rcx, 20
        xor rax, rax
        rep stosb
;       [29:5] free named register 'rax'
;       [29:5] free named register 'rcx'
;       [29:5] free named register 'rdi'
;       [30:5] var n = num
;       [30:9] n: i64 @ qword [rsp - 75]
;       [30:9] n =num
;       [30:13] num
;       [30:13] num
;       [30:13] num
;       [30:13] allocate scratch register -> r15
        mov r15, qword [rsp - 47]
        mov qword [rsp - 75], r15
;       [30:13] free scratch register 'r15'
;       [31:5] var is_negative : bool = false
;       [31:9] is_negative: bool @ byte [rsp - 76]
;       [31:9] is_negative =false
;       [31:30] false
        mov byte [rsp - 76], false
        if_33_8_86_3:
;       [33:8] ? n < 0
;       [33:8] ? n < 0
        cmp_33_8_86_3:
;       [33:8] allocate scratch register -> r15
;           [33:8] n
;           [33:8] n
            mov r15, qword [rsp - 75]
;       [33:12] allocate scratch register -> r14
;           [33:12] 0
;           [33:12] 0
            mov r14, 0
        cmp r15, r14
;       [33:8] free scratch register 'r14'
;       [33:8] free scratch register 'r15'
        jge if_33_5_86_3_end
        jmp if_33_8_86_3_code
        if_33_8_86_3_code:
;           [34:9] is_negative = true
;           [34:23] true
            mov byte [rsp - 76], true
;           [35:9] n = -n
;           [35:13] -n
;           [35:13] -n
;           [35:14] -n
            neg qword [rsp - 75]
        if_33_5_86_3_end:
;       [38:5] var i = 20
;       [38:9] i: i64 @ qword [rsp - 84]
;       [38:9] i =20
;       [38:13] 20
;       [38:13] 20
;       [38:13] 20
        mov qword [rsp - 84], 20
;       [39:5] loop
        loop_39_5_86_3:
;           [40:9] i = i - 1
;           [40:13] i - 1
;           [40:13] i - 1
;           [40:13] i
;           [40:17] i - 1
            sub qword [rsp - 84], 1
;           [41:9] buf[i] = 48 + (n % 10)
;           [41:9] allocate scratch register -> r15
;           [41:13] set array index
;           [41:13] i
;           [41:13] i
;           [41:13] i
            mov r15, qword [rsp - 84]
;           [41:13] bounds check
            cmp r15, 20
;           [41:13] allocate scratch register -> r14
;           [41:13] line number
            mov r14, 41
            cmovge rbp, r14
;           [41:13] free scratch register 'r14'
            jge panic_bounds
;           [41:18] 48 + (n % 10)
;           [41:18] 48 + (n % 10)
;           [41:18] 48
            mov byte [rsp + r15 - 67], 48
;           [41:24] byte [rsp + r15 - 67] + (n % 10)
;           [41:24] allocate scratch register -> r14
;           [41:24] (n % 10)
;           [41:24] n
            mov r14, qword [rsp - 75]
;           [41:28] r14 % 10
;           [41:28] allocate named register 'rax'
            mov rax, r14
;           [41:28] allocate named register 'rdx'
            cqo
;           [41:28] allocate scratch register -> r13
            mov r13, 10
            idiv r13
;           [41:28] free scratch register 'r13'
            mov r14, rdx
;           [41:28] free named register 'rdx'
;           [41:28] free named register 'rax'
            add byte [rsp + r15 - 67], r14b
;           [41:24] free scratch register 'r14'
;           [41:9] free scratch register 'r15'
;           [42:9] n = n / 10
;           [42:13] n / 10
;           [42:13] n / 10
;           [42:13] n
;           [42:17] n / 10
;           [42:17] allocate named register 'rax'
            mov rax, qword [rsp - 75]
;           [42:17] allocate named register 'rdx'
            cqo
;           [42:17] allocate scratch register -> r15
            mov r15, 10
            idiv r15
;           [42:17] free scratch register 'r15'
            mov qword [rsp - 75], rax
;           [42:17] free named register 'rdx'
;           [42:17] free named register 'rax'
            if_43_12_86_3:
;           [43:12] ? n == 0
;           [43:12] ? n == 0
            cmp_43_12_86_3:
;           [43:12] allocate scratch register -> r15
;               [43:12] n
;               [43:12] n
                mov r15, qword [rsp - 75]
;           [43:17] allocate scratch register -> r14
;               [43:17] 0
;               [43:17] 0
                mov r14, 0
            cmp r15, r14
;           [43:12] free scratch register 'r14'
;           [43:12] free scratch register 'r15'
            jne if_43_9_86_3_end
            jmp if_43_12_86_3_code
            if_43_12_86_3_code:
;               [43:19] break
                jmp loop_39_5_86_3_end
            if_43_9_86_3_end:
        jmp loop_39_5_86_3
        loop_39_5_86_3_end:
        if_46_8_86_3:
;       [46:8] ? is_negative
;       [46:8] ? is_negative
        cmp_46_8_86_3:
;       [46:8] allocate scratch register -> r15
;           [46:8] is_negative
;           [46:8] is_negative
            movsx r15, byte [rsp - 76]
        test r15, r15
;       [46:8] free scratch register 'r15'
        je if_46_5_86_3_end
        jmp if_46_8_86_3_code
        if_46_8_86_3_code:
;           [47:9] i = i - 1
;           [47:13] i - 1
;           [47:13] i - 1
;           [47:13] i
;           [47:17] i - 1
            sub qword [rsp - 84], 1
;           [48:9] buf[i] = 45
;           [48:9] allocate scratch register -> r15
;           [48:13] set array index
;           [48:13] i
;           [48:13] i
;           [48:13] i
            mov r15, qword [rsp - 84]
;           [48:13] bounds check
            cmp r15, 20
;           [48:13] allocate scratch register -> r14
;           [48:13] line number
            mov r14, 48
            cmovge rbp, r14
;           [48:13] free scratch register 'r14'
            jge panic_bounds
;           [48:18] 45
;           [48:18] 45
;           [48:18] 45
            mov byte [rsp + r15 - 67], 45
;           [48:9] free scratch register 'r15'
        if_46_5_86_3_end:
;       [51:5] var write_pos = 0
;       [51:9] write_pos: i64 @ qword [rsp - 92]
;       [51:9] write_pos =0
;       [51:21] 0
;       [51:21] 0
;       [51:21] 0
        mov qword [rsp - 92], 0
;       [52:5] loop
        loop_52_5_86_3:
;           [53:9] buf[write_pos] = buf[i]
;           [53:9] allocate scratch register -> r15
;           [53:13] set array index
;           [53:13] write_pos
;           [53:13] write_pos
;           [53:13] write_pos
            mov r15, qword [rsp - 92]
;           [53:13] bounds check
            cmp r15, 20
;           [53:13] allocate scratch register -> r14
;           [53:13] line number
            mov r14, 53
            cmovge rbp, r14
;           [53:13] free scratch register 'r14'
            jge panic_bounds
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] buf[i]
;           [53:26] allocate scratch register -> r14
;           [53:30] set array index
;           [53:30] i
;           [53:30] i
;           [53:30] i
            mov r14, qword [rsp - 84]
;           [53:30] bounds check
            cmp r14, 20
;           [53:30] allocate scratch register -> r13
;           [53:30] line number
            mov r13, 53
            cmovge rbp, r13
;           [53:30] free scratch register 'r13'
            jge panic_bounds
;           [53:26] allocate scratch register -> r13
            mov r13b, byte [rsp + r14 - 67]
            mov byte [rsp + r15 - 67], r13b
;           [53:26] free scratch register 'r13'
;           [53:26] free scratch register 'r14'
;           [53:9] free scratch register 'r15'
;           [54:9] write_pos = write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos + 1
;           [54:21] write_pos
;           [54:33] write_pos + 1
            add qword [rsp - 92], 1
;           [55:9] i = i + 1
;           [55:13] i + 1
;           [55:13] i + 1
;           [55:13] i
;           [55:17] i + 1
            add qword [rsp - 84], 1
            if_56_12_86_3:
;           [56:12] ? i == 20
;           [56:12] ? i == 20
            cmp_56_12_86_3:
;           [56:12] allocate scratch register -> r15
;               [56:12] i
;               [56:12] i
                mov r15, qword [rsp - 84]
;           [56:17] allocate scratch register -> r14
;               [56:17] 20
;               [56:17] 20
                mov r14, 20
            cmp r15, r14
;           [56:12] free scratch register 'r14'
;           [56:12] free scratch register 'r15'
            jne if_56_9_86_3_end
            jmp if_56_12_86_3_code
            if_56_12_86_3_code:
;               [56:20] break
                jmp loop_52_5_86_3_end
            if_56_9_86_3_end:
        jmp loop_52_5_86_3
        loop_52_5_86_3_end:
;       [59:5] print(write_pos, address_of(buf))
;       [59:11] allocate named register 'rdx'
        mov rdx, qword [rsp - 92]
;       [59:22] allocate named register 'rsi'
;       [59:22] address_of(buf)
;       [59:22] address_of(buf)
;       [59:22] rsi = address_of(buf)
;       [59:22] address_of(buf)
        lea rsi, [rsp - 67]
;       [11:6] print(len : reg_rdx, ptr : reg_rsi) 
        print_59_5_86_3:
;           [59:5] alias len -> rdx  (lea: , len: 0)
;           [59:5] alias ptr -> rsi  (lea: , len: 0)
;           [12:5] mov(rax, 1)
            mov rax, 1
;           [12:19] # write system call
;           [13:5] mov(rdi, 1)
            mov rdi, 1
;           [13:19] # file descriptor for standard out
;           [14:5] mov(rsi, ptr)
;           [14:19] # buffer address
;           [15:5] mov(rdx, len)
;           [15:19] # buffer size
;           [16:5] syscall()
            syscall
;           [59:5] free named register 'rsi'
;           [59:5] free named register 'rdx'
        print_59_5_86_3_end:
    print_num_86_3_end:
;   [87:3] print(1, address_of(nl))
;   [87:9] allocate named register 'rdx'
    mov rdx, 1
;   [87:12] allocate named register 'rsi'
;   [87:12] address_of(nl)
;   [87:12] address_of(nl)
;   [87:12] rsi = address_of(nl)
;   [87:12] address_of(nl)
    lea rsi, [rsp - 1]
;   [11:6] print(len : reg_rdx, ptr : reg_rsi) 
    print_87_3:
;       [87:3] alias len -> rdx  (lea: , len: 0)
;       [87:3] alias ptr -> rsi  (lea: , len: 0)
;       [12:5] mov(rax, 1)
        mov rax, 1
;       [12:19] # write system call
;       [13:5] mov(rdi, 1)
        mov rdi, 1
;       [13:19] # file descriptor for standard out
;       [14:5] mov(rsi, ptr)
;       [14:19] # buffer address
;       [15:5] mov(rdx, len)
;       [15:19] # buffer size
;       [16:5] syscall()
        syscall
;       [87:3] free named register 'rsi'
;       [87:3] free named register 'rdx'
    print_87_3_end:
    ; system call: exit 0
    mov rax, 60
    mov rdi, 0
    syscall

panic_bounds:
;   print message to stderr
    mov rax, 1
    mov rdi, 2
    lea rsi, [msg_panic]
    mov rdx, msg_panic_len
    syscall
;   line number is in `rbp`
    mov rax, rbp
;   convert to string
    lea rdi, [num_buffer + 19]
    mov byte [rdi], 10
    dec rdi
    mov rcx, 10
.convert_loop:
    xor rdx, rdx
    div rcx
    add dl, '0'
    mov [rdi], dl
    dec rdi
    test rax, rax
    jnz .convert_loop
    inc rdi
;   print line number to stderr
    mov rax, 1
    mov rsi, rdi
    lea rdx, [num_buffer + 20]
    sub rdx, rdi
    mov rdi, 2
    syscall
;   exit with error code 255
    mov rax, 60
    mov rdi, 255
    syscall
section .rodata
    msg_panic: db 'panic: bounds at line '
    msg_panic_len equ $ - msg_panic
section .bss
    num_buffer: resb 21

; max scratch registers in use: 3
;            max frames in use: 7
;               max stack size: 92 B
