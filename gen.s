; generated by baz

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

fib:
;  fib(i):res 
;  res: qword[rbp-8]
;  i: qword[rbp+16]
   push rbp
   mov rbp,rsp
   if_8_8:
;  [8:8] ? i=0 
;  [8:8] ? i=0 
   cmp_8_8:
   cmp qword[rbp+16],0
   jne if_8_5_end
   jmp if_8_8_code
   if_8_8_code:
;    [9:9] res=1 
;    [9:13] 1 
;    [9:13] res=1 
     mov qword[rbp-8],1
;    [10:9] return 
     mov rax,qword[rbp-8]
     pop rbp
     ret
   if_8_5_end:
;  [12:5] res=i*fib(i-1)
;  [12:9] i*fib(i-1)
;  [12:9] res=i
;  alloc r15
   mov r15,qword[rbp+16]
   mov qword[rbp-8],r15
;  free r15
;  [12:11] res*fib(i-1)
;  alloc r15
;  [12:11] fib(i-1)
   sub rsp,8
;  alloc r14
;    [12:15] i-1
;    [12:15] r14=i
     mov r14,qword[rbp+16]
;    [12:17] r14-1
     sub r14,1
   push r14
;  free r14
   call fib
   add rsp,16
   mov r15,rax
   imul r15,qword[rbp-8]
   mov qword[rbp-8],r15
;  free r15
   mov rax,qword[rbp-8]
   pop rbp
   ret

main:
;  [16:5] exit(fib(5))
;  exit(v:reg_rdi) 
;    inline: 16_5
;    alloc rdi
;    alias v -> rdi
;    [16:10] fib(5)
;    [16:10] rdi=fib(5)
;    [16:10] fib(5)
     push 5
     call fib
     add rsp,8
     mov rdi,rax
;    [2:5] mov(rax,60)
     mov rax,60
;    [2:17] # exit system call 
;    [3:5] mov(rdi,v)
;    [3:17] # return code 
;    [4:5] syscall 
     syscall
;    free rdi
   exit_16_5_end:

; max scratch registers in use: 3
;            max frames in use: 4
