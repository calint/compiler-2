; generated by baz

true equ 1
false equ 0

section .data
align 4
;[1:1] field hello = "hello world from baz\n" 
hello: db 'hello world from baz',10,''
hello.len equ $-hello
;[2:1] field input = "............................................................" 
input: db '............................................................'
input.len equ $-input
;[3:1] field prompt1 = "enter name:\n" 
prompt1: db 'enter name:',10,''
prompt1.len equ $-prompt1
;[4:1] field prompt2 = "that is not a name.\n" 
prompt2: db 'that is not a name.',10,''
prompt2.len equ $-prompt2
;[5:1] field prompt3 = "hello " 
prompt3: db 'hello '
prompt3.len equ $-prompt3
;[6:1] field dot = "." 
dot: db '.'
dot.len equ $-dot
;[7:1] field nl = "\n" 
nl: db '',10,''
nl.len equ $-nl

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

;[9:1] # all functions are inlined 
;[11:1] # arguments can be placed in specified register using `reg_...` syntax 
;[39:1] # user types are defined using keyword `type` 
;[41:1] # default type is `i64` and does not need to be specified 
;[46:1] # function arguments are equivalent to mutable references 
;[52:1] # default argument type is `i64` 
;[57:1] # return target is specified as a variable, in this case `res` 
main:
;  p: qword[rbp-16]
;  [63:5] var p : point = {0, 0}
;  [63:9] p : point = {0, 0}
;  [63:21] {0, 0}
;    [63:21] {0, 0}
;    [63:22] 0
;    [63:22] 0
;    [63:22] p.x = 0
     mov qword[rbp-16], 0
;    [63:25] 0
;    [63:25] 0
;    [63:25] p.y = 0
     mov qword[rbp-8], 0
;  [64:5] foo(p) 
;  foo(p : point) 
;    inline: 64_5
;    alias p -> p
;    [48:5] p.x = 0b10 
;    [48:11] 0b10 
;    [48:11] 0b10 
;    [48:11] p.x = 0b10 
     mov qword[rbp-16], 0b10
;    [48:19] # binary value 2 
;    [49:5] p.y = 0xb 
;    [49:11] 0xb 
;    [49:11] 0xb 
;    [49:11] p.y = 0xb 
     mov qword[rbp-8], 0xb
;    [49:19] # hex value 11 
   foo_64_5_end:
;  [65:5] assert(p.x == 2) 
;  assert(expr : bool) 
;    inline: 65_5
;    alloc r15
;    [65:12] p.x == 2
;    [65:12] ? p.x == 2
;    [65:12] ? p.x == 2
     cmp_65_12:
     cmp qword[rbp-16], 2
     jne bool_false_65_12
     bool_true_65_12:  ; opt1
     mov r15, true
     jmp bool_end_65_12
     bool_false_65_12:
     mov r15, false
     bool_end_65_12:
;    alias expr -> r15
     if_36_8_65_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_65_5:
     cmp r15, 0
     jne if_36_5_65_5_end
     if_36_8_65_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_65_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_65_5_end:
     if_36_5_65_5_end:
;    free r15
   assert_65_5_end:
;  [66:5] assert(p.y == 0xb) 
;  assert(expr : bool) 
;    inline: 66_5
;    alloc r15
;    [66:12] p.y == 0xb
;    [66:12] ? p.y == 0xb
;    [66:12] ? p.y == 0xb
     cmp_66_12:
     cmp qword[rbp-8], 0xb
     jne bool_false_66_12
     bool_true_66_12:  ; opt1
     mov r15, true
     jmp bool_end_66_12
     bool_false_66_12:
     mov r15, false
     bool_end_66_12:
;    alias expr -> r15
     if_36_8_66_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_66_5:
     cmp r15, 0
     jne if_36_5_66_5_end
     if_36_8_66_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_66_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_66_5_end:
     if_36_5_66_5_end:
;    free r15
   assert_66_5_end:
;  i: qword[rbp-24]
;  [68:5] var i = 0 
;  [68:9] i = 0 
;  [68:13] 0 
;  [68:13] 0 
;  [68:13] i = 0 
   mov qword[rbp-24], 0
;  [69:5] bar(i) 
;  bar(arg) 
;    inline: 69_5
;    alias arg -> i
;    [54:5] arg = 0xff 
;    [54:11] 0xff 
;    [54:11] 0xff 
;    [54:11] arg = 0xff 
     mov qword[rbp-24], 0xff
   bar_69_5_end:
;  [70:5] assert(i == 0xff) 
;  assert(expr : bool) 
;    inline: 70_5
;    alloc r15
;    [70:12] i == 0xff
;    [70:12] ? i == 0xff
;    [70:12] ? i == 0xff
     cmp_70_12:
     cmp qword[rbp-24], 0xff
     jne bool_false_70_12
     bool_true_70_12:  ; opt1
     mov r15, true
     jmp bool_end_70_12
     bool_false_70_12:
     mov r15, false
     bool_end_70_12:
;    alias expr -> r15
     if_36_8_70_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_70_5:
     cmp r15, 0
     jne if_36_5_70_5_end
     if_36_8_70_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_70_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_70_5_end:
     if_36_5_70_5_end:
;    free r15
   assert_70_5_end:
;  j: qword[rbp-32]
;  [72:5] var j = 1 
;  [72:9] j = 1 
;  [72:13] 1 
;  [72:13] 1 
;  [72:13] j = 1 
   mov qword[rbp-32], 1
;  k: qword[rbp-40]
;  [73:5] var k = baz(j) 
;  [73:9] k = baz(j) 
;  [73:13] baz(j) 
;  [73:13] baz(j) 
;  [73:13] k = baz(j) 
;  [73:13] baz(j) 
;  baz(arg) : i64 res 
;    inline: 73_13
;    alias res -> k
;    alias arg -> j
;    [59:5] res = arg * 2 
;    [59:11] arg * 2 
;    alloc r15
;    [59:11] arg * 2 
;    [59:11] r15 = arg 
     mov r15, qword[rbp-32]
;    [59:17] r15 * 2 
     imul r15, 2
     mov qword[rbp-40], r15
;    free r15
   baz_73_13_end:
;  [74:5] assert(k == 2) 
;  assert(expr : bool) 
;    inline: 74_5
;    alloc r15
;    [74:12] k == 2
;    [74:12] ? k == 2
;    [74:12] ? k == 2
     cmp_74_12:
     cmp qword[rbp-40], 2
     jne bool_false_74_12
     bool_true_74_12:  ; opt1
     mov r15, true
     jmp bool_end_74_12
     bool_false_74_12:
     mov r15, false
     bool_end_74_12:
;    alias expr -> r15
     if_36_8_74_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_74_5:
     cmp r15, 0
     jne if_36_5_74_5_end
     if_36_8_74_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_74_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_74_5_end:
     if_36_5_74_5_end:
;    free r15
   assert_74_5_end:
;  x: qword[rbp-48]
;  [76:5] var x = 1 
;  [76:9] x = 1 
;  [76:13] 1 
;  [76:13] 1 
;  [76:13] x = 1 
   mov qword[rbp-48], 1
;  y: qword[rbp-56]
;  [77:5] var y = 2 
;  [77:9] y = 2 
;  [77:13] 2 
;  [77:13] 2 
;  [77:13] y = 2 
   mov qword[rbp-56], 2
;  o1: qword[rbp-76]
;  [79:5] var o1 : object = {{x * 10, y}, 0xff0000}
;  [79:9] o1 : object = {{x * 10, y}, 0xff0000}
;  [79:23] {{x * 10, y}, 0xff0000}
;    [79:23] {{x * 10, y}, 0xff0000}
;      [79:24] {x * 10, y}
;      [79:25] x * 10
;      alloc r15
;      [79:25] x * 10
;      [79:25] r15 = x 
       mov r15, qword[rbp-48]
;      [79:29] r15 * 10
       imul r15, 10
       mov qword[rbp-76], r15
;      free r15
;      [79:33] y
;      [79:33] y
;      [79:33] o1.pos.y = y
;      alloc r15
       mov r15, qword[rbp-56]
       mov qword[rbp-68], r15
;      free r15
;    [79:37] 0xff0000
;    [79:37] 0xff0000
;    [79:37] o1.color = 0xff0000
     mov dword[rbp-60], 0xff0000
;  [80:5] assert(o1.pos.x == 10) 
;  assert(expr : bool) 
;    inline: 80_5
;    alloc r15
;    [80:12] o1.pos.x == 10
;    [80:12] ? o1.pos.x == 10
;    [80:12] ? o1.pos.x == 10
     cmp_80_12:
     cmp qword[rbp-76], 10
     jne bool_false_80_12
     bool_true_80_12:  ; opt1
     mov r15, true
     jmp bool_end_80_12
     bool_false_80_12:
     mov r15, false
     bool_end_80_12:
;    alias expr -> r15
     if_36_8_80_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_80_5:
     cmp r15, 0
     jne if_36_5_80_5_end
     if_36_8_80_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_80_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_80_5_end:
     if_36_5_80_5_end:
;    free r15
   assert_80_5_end:
;  [81:5] assert(o1.pos.y == 2) 
;  assert(expr : bool) 
;    inline: 81_5
;    alloc r15
;    [81:12] o1.pos.y == 2
;    [81:12] ? o1.pos.y == 2
;    [81:12] ? o1.pos.y == 2
     cmp_81_12:
     cmp qword[rbp-68], 2
     jne bool_false_81_12
     bool_true_81_12:  ; opt1
     mov r15, true
     jmp bool_end_81_12
     bool_false_81_12:
     mov r15, false
     bool_end_81_12:
;    alias expr -> r15
     if_36_8_81_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_81_5:
     cmp r15, 0
     jne if_36_5_81_5_end
     if_36_8_81_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_81_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_81_5_end:
     if_36_5_81_5_end:
;    free r15
   assert_81_5_end:
;  [82:5] assert(o1.color == 0xff0000) 
;  assert(expr : bool) 
;    inline: 82_5
;    alloc r15
;    [82:12] o1.color == 0xff0000
;    [82:12] ? o1.color == 0xff0000
;    [82:12] ? o1.color == 0xff0000
     cmp_82_12:
     cmp dword[rbp-60], 0xff0000
     jne bool_false_82_12
     bool_true_82_12:  ; opt1
     mov r15, true
     jmp bool_end_82_12
     bool_false_82_12:
     mov r15, false
     bool_end_82_12:
;    alias expr -> r15
     if_36_8_82_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_82_5:
     cmp r15, 0
     jne if_36_5_82_5_end
     if_36_8_82_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_82_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_82_5_end:
     if_36_5_82_5_end:
;    free r15
   assert_82_5_end:
;  p1: qword[rbp-92]
;  [84:5] var p1 : point = {-x, -y}
;  [84:9] p1 : point = {-x, -y}
;  [84:22] {-x, -y}
;    [84:22] {-x, -y}
;    [84:23] -x
;    [84:23] -x
;    [84:24] p1.x = -x
;    alloc r15
     mov r15, qword[rbp-48]
     mov qword[rbp-92], r15
;    free r15
     neg qword[rbp-92]
;    [84:27] -y
;    [84:27] -y
;    [84:28] p1.y = -y
;    alloc r15
     mov r15, qword[rbp-56]
     mov qword[rbp-84], r15
;    free r15
     neg qword[rbp-84]
;  [85:5] o1.pos = p1 
;  [85:14] p1 
;    [85:14] p1 
;    alloc r15
     mov r15, qword[rbp-92]
     mov qword[rbp-76], r15
;    free r15
;    alloc r15
     mov r15, qword[rbp-84]
     mov qword[rbp-68], r15
;    free r15
;  [86:5] assert(o1.pos.x == -1) 
;  assert(expr : bool) 
;    inline: 86_5
;    alloc r15
;    [86:12] o1.pos.x == -1
;    [86:12] ? o1.pos.x == -1
;    [86:12] ? o1.pos.x == -1
     cmp_86_12:
     cmp qword[rbp-76], -1
     jne bool_false_86_12
     bool_true_86_12:  ; opt1
     mov r15, true
     jmp bool_end_86_12
     bool_false_86_12:
     mov r15, false
     bool_end_86_12:
;    alias expr -> r15
     if_36_8_86_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_86_5:
     cmp r15, 0
     jne if_36_5_86_5_end
     if_36_8_86_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_86_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_86_5_end:
     if_36_5_86_5_end:
;    free r15
   assert_86_5_end:
;  [87:5] assert(o1.pos.y == -2) 
;  assert(expr : bool) 
;    inline: 87_5
;    alloc r15
;    [87:12] o1.pos.y == -2
;    [87:12] ? o1.pos.y == -2
;    [87:12] ? o1.pos.y == -2
     cmp_87_12:
     cmp qword[rbp-68], -2
     jne bool_false_87_12
     bool_true_87_12:  ; opt1
     mov r15, true
     jmp bool_end_87_12
     bool_false_87_12:
     mov r15, false
     bool_end_87_12:
;    alias expr -> r15
     if_36_8_87_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_87_5:
     cmp r15, 0
     jne if_36_5_87_5_end
     if_36_8_87_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_87_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_87_5_end:
     if_36_5_87_5_end:
;    free r15
   assert_87_5_end:
;  o2: qword[rbp-112]
;  [89:5] var o2 : object = o1 
;  [89:9] o2 : object = o1 
;  [89:23] o1 
;    [89:23] o1 
;      [89:23] o1 
;      alloc r15
       mov r15, qword[rbp-76]
       mov qword[rbp-112], r15
;      free r15
;      alloc r15
       mov r15, qword[rbp-68]
       mov qword[rbp-104], r15
;      free r15
;    alloc r15
     mov r15d, dword[rbp-60]
     mov dword[rbp-96], r15d
;    free r15
;  [90:5] assert(o2.pos.x == -1) 
;  assert(expr : bool) 
;    inline: 90_5
;    alloc r15
;    [90:12] o2.pos.x == -1
;    [90:12] ? o2.pos.x == -1
;    [90:12] ? o2.pos.x == -1
     cmp_90_12:
     cmp qword[rbp-112], -1
     jne bool_false_90_12
     bool_true_90_12:  ; opt1
     mov r15, true
     jmp bool_end_90_12
     bool_false_90_12:
     mov r15, false
     bool_end_90_12:
;    alias expr -> r15
     if_36_8_90_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_90_5:
     cmp r15, 0
     jne if_36_5_90_5_end
     if_36_8_90_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_90_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_90_5_end:
     if_36_5_90_5_end:
;    free r15
   assert_90_5_end:
;  [91:5] assert(o2.pos.y == -2) 
;  assert(expr : bool) 
;    inline: 91_5
;    alloc r15
;    [91:12] o2.pos.y == -2
;    [91:12] ? o2.pos.y == -2
;    [91:12] ? o2.pos.y == -2
     cmp_91_12:
     cmp qword[rbp-104], -2
     jne bool_false_91_12
     bool_true_91_12:  ; opt1
     mov r15, true
     jmp bool_end_91_12
     bool_false_91_12:
     mov r15, false
     bool_end_91_12:
;    alias expr -> r15
     if_36_8_91_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_91_5:
     cmp r15, 0
     jne if_36_5_91_5_end
     if_36_8_91_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_91_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_91_5_end:
     if_36_5_91_5_end:
;    free r15
   assert_91_5_end:
;  [92:5] assert(o2.color == 0xff0000) 
;  assert(expr : bool) 
;    inline: 92_5
;    alloc r15
;    [92:12] o2.color == 0xff0000
;    [92:12] ? o2.color == 0xff0000
;    [92:12] ? o2.color == 0xff0000
     cmp_92_12:
     cmp dword[rbp-96], 0xff0000
     jne bool_false_92_12
     bool_true_92_12:  ; opt1
     mov r15, true
     jmp bool_end_92_12
     bool_false_92_12:
     mov r15, false
     bool_end_92_12:
;    alias expr -> r15
     if_36_8_92_5:
;    [36:8] ? not expr 
;    [36:8] ? not expr 
     cmp_36_8_92_5:
     cmp r15, 0
     jne if_36_5_92_5_end
     if_36_8_92_5_code:  ; opt1
;      [36:17] exit(1) 
;      exit(v : reg_rdi) 
;        inline: 36_17_92_5
;        alloc rdi
;        alias v -> rdi
         mov rdi, 1
;        [13:5] mov(rax, 60) 
         mov rax, 60
;        [13:19] # exit system call 
;        [14:5] mov(rdi, v) 
;        [14:19] # return code 
;        [15:5] syscall() 
         syscall
;        free rdi
       exit_36_17_92_5_end:
     if_36_5_92_5_end:
;    free r15
   assert_92_5_end:
;  [94:5] print(hello.len, hello) 
;  print(len : reg_rdx, ptr : reg_rsi) 
;    inline: 94_5
;    alloc rdx
;    alias len -> rdx
     mov rdx, hello.len
;    alloc rsi
;    alias ptr -> rsi
     mov rsi, hello
;    [19:5] mov(rax, 1) 
     mov rax, 1
;    [19:19] # write system call 
;    [20:5] mov(rdi, 1) 
     mov rdi, 1
;    [20:19] # file descriptor for standard out 
;    [21:5] mov(rsi, ptr) 
;    [21:19] # buffer address 
;    [22:5] mov(rdx, len) 
;    [22:19] # buffer size 
;    [23:5] syscall() 
     syscall
;    free rsi
;    free rdx
   print_94_5_end:
;  [95:5] loop
   loop_95_5:
;    [96:9] print(prompt1.len, prompt1) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 96_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, prompt1.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, prompt1
;      [19:5] mov(rax, 1) 
       mov rax, 1
;      [19:19] # write system call 
;      [20:5] mov(rdi, 1) 
       mov rdi, 1
;      [20:19] # file descriptor for standard out 
;      [21:5] mov(rsi, ptr) 
;      [21:19] # buffer address 
;      [22:5] mov(rdx, len) 
;      [22:19] # buffer size 
;      [23:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_96_9_end:
;    len: qword[rbp-120]
;    [97:9] var len = read(input.len, input) - 1 
;    [97:13] len = read(input.len, input) - 1 
;    [97:19] read(input.len, input) - 1 
;    [97:19] read(input.len, input) - 1 
;    [97:19] len = read(input.len, input) 
;    [97:19] read(input.len, input) 
;    read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes 
;      inline: 97_19
;      alias nbytes -> len
;      alloc rdx
;      alias len -> rdx
       mov rdx, input.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, input
;      [27:5] mov(rax, 0) 
       mov rax, 0
;      [27:19] # read system call 
;      [28:5] mov(rdi, 0) 
       mov rdi, 0
;      [28:19] # file descriptor for standard input 
;      [29:5] mov(rsi, ptr) 
;      [29:19] # buffer address 
;      [30:5] mov(rdx, len) 
;      [30:19] # buffer size 
;      [31:5] syscall() 
       syscall
;      [32:5] mov(nbytes, rax) 
       mov qword[rbp-120], rax
;      [32:22] # return value 
;      free rsi
;      free rdx
     read_97_19_end:
;    [97:44] len - 1 
     sub qword[rbp-120], 1
;    [97:49] # -1 don't include the '\n' 
     if_98_12:
;    [98:12] ? len == 0 
;    [98:12] ? len == 0 
     cmp_98_12:
     cmp qword[rbp-120], 0
     jne if_100_19
     if_98_12_code:  ; opt1
;      [99:13] break 
       jmp loop_95_5_end
     jmp if_98_9_end
     if_100_19:
;    [100:19] ? len <= 4 
;    [100:19] ? len <= 4 
     cmp_100_19:
     cmp qword[rbp-120], 4
     jg if_else_98_9
     if_100_19_code:  ; opt1
;      [101:13] print(prompt2.len, prompt2) 
;      print(len : reg_rdx, ptr : reg_rsi) 
;        inline: 101_13
;        alloc rdx
;        alias len -> rdx
         mov rdx, prompt2.len
;        alloc rsi
;        alias ptr -> rsi
         mov rsi, prompt2
;        [19:5] mov(rax, 1) 
         mov rax, 1
;        [19:19] # write system call 
;        [20:5] mov(rdi, 1) 
         mov rdi, 1
;        [20:19] # file descriptor for standard out 
;        [21:5] mov(rsi, ptr) 
;        [21:19] # buffer address 
;        [22:5] mov(rdx, len) 
;        [22:19] # buffer size 
;        [23:5] syscall() 
         syscall
;        free rsi
;        free rdx
       print_101_13_end:
;      [102:13] continue 
       jmp loop_95_5
     jmp if_98_9_end
     if_else_98_9:
;        [104:13] print(prompt3.len, prompt3) 
;        print(len : reg_rdx, ptr : reg_rsi) 
;          inline: 104_13
;          alloc rdx
;          alias len -> rdx
           mov rdx, prompt3.len
;          alloc rsi
;          alias ptr -> rsi
           mov rsi, prompt3
;          [19:5] mov(rax, 1) 
           mov rax, 1
;          [19:19] # write system call 
;          [20:5] mov(rdi, 1) 
           mov rdi, 1
;          [20:19] # file descriptor for standard out 
;          [21:5] mov(rsi, ptr) 
;          [21:19] # buffer address 
;          [22:5] mov(rdx, len) 
;          [22:19] # buffer size 
;          [23:5] syscall() 
           syscall
;          free rsi
;          free rdx
         print_104_13_end:
;        [105:13] print(len, input) 
;        print(len : reg_rdx, ptr : reg_rsi) 
;          inline: 105_13
;          alloc rdx
;          alias len -> rdx
           mov rdx, qword[rbp-120]
;          alloc rsi
;          alias ptr -> rsi
           mov rsi, input
;          [19:5] mov(rax, 1) 
           mov rax, 1
;          [19:19] # write system call 
;          [20:5] mov(rdi, 1) 
           mov rdi, 1
;          [20:19] # file descriptor for standard out 
;          [21:5] mov(rsi, ptr) 
;          [21:19] # buffer address 
;          [22:5] mov(rdx, len) 
;          [22:19] # buffer size 
;          [23:5] syscall() 
           syscall
;          free rsi
;          free rdx
         print_105_13_end:
;        [106:13] print(dot.len, dot) 
;        print(len : reg_rdx, ptr : reg_rsi) 
;          inline: 106_13
;          alloc rdx
;          alias len -> rdx
           mov rdx, dot.len
;          alloc rsi
;          alias ptr -> rsi
           mov rsi, dot
;          [19:5] mov(rax, 1) 
           mov rax, 1
;          [19:19] # write system call 
;          [20:5] mov(rdi, 1) 
           mov rdi, 1
;          [20:19] # file descriptor for standard out 
;          [21:5] mov(rsi, ptr) 
;          [21:19] # buffer address 
;          [22:5] mov(rdx, len) 
;          [22:19] # buffer size 
;          [23:5] syscall() 
           syscall
;          free rsi
;          free rdx
         print_106_13_end:
;        [107:13] print(nl.len, nl) 
;        print(len : reg_rdx, ptr : reg_rsi) 
;          inline: 107_13
;          alloc rdx
;          alias len -> rdx
           mov rdx, nl.len
;          alloc rsi
;          alias ptr -> rsi
           mov rsi, nl
;          [19:5] mov(rax, 1) 
           mov rax, 1
;          [19:19] # write system call 
;          [20:5] mov(rdi, 1) 
           mov rdi, 1
;          [20:19] # file descriptor for standard out 
;          [21:5] mov(rsi, ptr) 
;          [21:19] # buffer address 
;          [22:5] mov(rdx, len) 
;          [22:19] # buffer size 
;          [23:5] syscall() 
           syscall
;          free rsi
;          free rdx
         print_107_13_end:
     if_98_9_end:
   jmp loop_95_5
   loop_95_5_end:
; main end

; system call: exit 0
mov rax, 60
mov rdi, 0
syscall

; max scratch registers in use: 1
;            max frames in use: 7
;        max inline stack size: 120 B
