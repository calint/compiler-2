; generated by baz

section .data
;[1:1] field prompt=" hello enter name: " 
prompt db '  hello    enter name: '
prompt.len equ $-prompt
;[2:1] field name="............................................................" 
name db '............................................................'
name.len equ $-name
;[3:1] field prompt2=" not a name: " 
prompt2 db '  not a name: '
prompt2.len equ $-prompt2

section .bss
stk resd 256
stk.end:

section .text
align 4
global _start
_start:
mov ebp,stk
mov esp,stk.end
;  [29:5] print(prompt.len,prompt)
;    [6:5] mov(ecx,ptr)
     mov ecx,prompt
;    [7:5] mov(edx,len)
     mov edx,prompt.len
;    [8:5] mov(ebx,1)
     mov ebx,1
;    [9:5] mov(eax,4)
     mov eax,4
;    [10:5] int(0x80)
     int 0x80
   print_29_5_end:
;  [30:5] loop
   loop_30_5:
;    [31:9] var len=read(name.len,name)-1 
;    [31:13] len=read(name.len,name)-1 
;    [31:17] read(name.len,name)-1 
;    [31:17] len=read(name.len,name)
;    [31:17] read(name.len,name)
;      [14:5] mov(esi,ptr)
       mov esi,name
;      [15:5] mov(edx,len)
       mov edx,name.len
;      [16:5] xor(eax)
       xor eax,eax
;      [17:5] xor(edi)
       xor edi,edi
;      [18:5] syscall 
       syscall
;      [19:5] mov(int,eax)
       mov dword[ebp+0],eax
     read_31_17_end:
;    [31:37] len-1 
     sub dword[ebp+0],1
;    [31:39] # remove the \n 
     if_32_12:
;    [32:12] ? len=0 
;    [32:12] ? len=0 
     cmp_32_12:
     cmp dword[ebp+0],0
     jne if_34_17
     if_32_12_code:  ; opt1
;      [33:13] print(prompt.len,prompt)
;        [6:5] mov(ecx,ptr)
         mov ecx,prompt
;        [7:5] mov(edx,len)
         mov edx,prompt.len
;        [8:5] mov(ebx,1)
         mov ebx,1
;        [9:5] mov(eax,4)
         mov eax,4
;        [10:5] int(0x80)
         int 0x80
       print_33_13_end:
       jmp if_32_9_end
     if_34_17:
;    [34:17] ? len<=4 
;    [34:17] ? len<=4 
     cmp_34_17:
     cmp dword[ebp+0],4
     jg if_else_32_9
     if_34_17_code:  ; opt1
;      [35:13] print(prompt2.len,prompt2)
;        [6:5] mov(ecx,ptr)
         mov ecx,prompt2
;        [7:5] mov(edx,len)
         mov edx,prompt2.len
;        [8:5] mov(ebx,1)
         mov ebx,1
;        [9:5] mov(eax,4)
         mov eax,4
;        [10:5] int(0x80)
         int 0x80
       print_35_13_end:
       jmp if_32_9_end
     if_else_32_9:
         if_37_16:
;        [37:16] ? read(name.len,name)=1 
;        [37:16] ? read(name.len,name)=1 
         cmp_37_16:
;          [37:16] read(name.len,name)
;          [37:16] edi=read(name.len,name)
;          [37:16] read(name.len,name)
;            [14:5] mov(esi,ptr)
             mov esi,name
;            [15:5] mov(edx,len)
             mov edx,name.len
;            [16:5] xor(eax)
             xor eax,eax
;            [17:5] xor(edi)
             xor edi,edi
;            [18:5] syscall 
             syscall
;            [19:5] mov(int,eax)
             mov edi,eax
           read_37_16_end:
         cmp edi,1
         jne if_37_13_end
         if_37_16_code:  ; opt1
;          [37:38] # is only \n 
;          [38:17] break 
           jmp loop_30_5_end
         if_37_13_end:
;        [39:13] print(len,name)
;          [6:5] mov(ecx,ptr)
           mov ecx,name
;          [7:5] mov(edx,len)
           mov edx,dword[ebp+0]
;          [8:5] mov(ebx,1)
           mov ebx,1
;          [9:5] mov(eax,4)
           mov eax,4
;          [10:5] int(0x80)
           int 0x80
         print_39_13_end:
     if_32_9_end:
   jmp loop_30_5
   loop_30_5_end:
;  [42:5] exit(0)
;    [23:5] mov(ebx,v)
     mov ebx,0
;    [24:5] mov(eax,1)
     mov eax,1
;    [25:5] int(0x80)
     int 0x80
   exit_42_5_end:

;           max regs in use: 1
;         max frames in use: 4
;          max stack in use: 1

