; generated by baz

true equ 1
false equ 0

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

main:
;  x: qword[rbp-8]
;  [8:5] var x = 2 
;  [8:9] x = 2 
;  [8:13] 2 
;  [8:13] 2 
;  [8:13] x=2 
   mov qword[rbp-8], 2
;  y: qword[rbp-16]
;  [9:5] var y = 1 + ~-x 
;  [9:9] y = 1 + ~-x 
;  [9:13] 1 + ~-x 
;  [9:13] 1 + ~-x 
;  [9:13] y=1 
   mov qword[rbp-16], 1
;  [9:19] y+ ~-x 
;  alloc r15
   mov r15, qword[rbp-8]
   neg r15
   not r15
   add qword[rbp-16], r15
;  free r15
;  [9:22] # ~-x == 1 
   if_10_8:
;  [10:8] ? y != 2 
;  [10:8] ? y != 2 
   cmp_10_8:
   cmp qword[rbp-16], 2
   je if_10_5_end
   if_10_8_code:  ; opt1
;    [10:15] exit(1) 
;    exit(v:reg_rdi) 
;      inline: 10_15
;      alloc rdi
;      alias v -> rdi
       mov rdi, 1
;      [2:2] mov(rax,60) 
       mov rax, 60
;      [2:14] # exit system call 
;      [3:2] mov(rdi,v) 
;      [3:14] # return code 
;      [4:2] syscall 
       syscall
;      free rdi
     exit_10_15_end:
   if_10_5_end:
;  z: qword[rbp-24]
;  [12:5] var z = 2 
;  [12:9] z = 2 
;  [12:13] 2 
;  [12:13] 2 
;  [12:13] z=2 
   mov qword[rbp-24], 2
;  w: qword[rbp-32]
;  [13:5] var w = z | ~-x 
;  [13:9] w = z | ~-x 
;  [13:13] z | ~-x 
;  [13:13] z | ~-x 
;  [13:13] w=z 
;  alloc r15
   mov r15, qword[rbp-24]
   mov qword[rbp-32], r15
;  free r15
;  [13:19] w| ~-x 
;  alloc r15
   mov r15, qword[rbp-8]
   neg r15
   not r15
   or qword[rbp-32], r15
;  free r15
   if_14_8:
;  [14:8] ? w != 3 
;  [14:8] ? w != 3 
   cmp_14_8:
   cmp qword[rbp-32], 3
   je if_14_5_end
   if_14_8_code:  ; opt1
;    [14:15] exit(2) 
;    exit(v:reg_rdi) 
;      inline: 14_15
;      alloc rdi
;      alias v -> rdi
       mov rdi, 2
;      [2:2] mov(rax,60) 
       mov rax, 60
;      [2:14] # exit system call 
;      [3:2] mov(rdi,v) 
;      [3:14] # return code 
;      [4:2] syscall 
       syscall
;      free rdi
     exit_14_15_end:
   if_14_5_end:
;  q: qword[rbp-40]
;  [16:5] var q = 1 << (x + z)
;  [16:9] q = 1 << (x + z)
;  [16:13] 1 << (x + z)
;  [16:13] 1 << (x + z)
;  [16:13] q=1 
   mov qword[rbp-40], 1
;  [16:19] q< (x + z)
;  alloc rcx
;  [16:19] (x + z)
;  [16:19] rcx=x 
   mov rcx, qword[rbp-8]
;  [16:23] rcx+ z
   add rcx, qword[rbp-24]
   sal qword[rbp-40], cl
;  free rcx
;  [16:26] # x + z == 4 
   if_17_8:
;  [17:8] ? q != 16 
;  [17:8] ? q != 16 
   cmp_17_8:
   cmp qword[rbp-40], 16
   je if_17_5_end
   if_17_8_code:  ; opt1
;    [17:16] exit(3) 
;    exit(v:reg_rdi) 
;      inline: 17_16
;      alloc rdi
;      alias v -> rdi
       mov rdi, 3
;      [2:2] mov(rax,60) 
       mov rax, 60
;      [2:14] # exit system call 
;      [3:2] mov(rdi,v) 
;      [3:14] # return code 
;      [4:2] syscall 
       syscall
;      free rdi
     exit_17_16_end:
   if_17_5_end:
;  r: qword[rbp-48]
;  [20:5] var r = 1 << ~-x 
;  [20:9] r = 1 << ~-x 
;  [20:13] 1 << ~-x 
;  [20:13] 1 << ~-x 
;  [20:13] r=1 
   mov qword[rbp-48], 1
;  [20:20] r< ~-x 
;  alloc rcx
   mov rcx, qword[rbp-8]
   neg rcx
   not rcx
   sal qword[rbp-48], cl
;  free rcx
   if_21_8:
;  [21:8] ? r != 2 
;  [21:8] ? r != 2 
   cmp_21_8:
   cmp qword[rbp-48], 2
   je if_21_5_end
   if_21_8_code:  ; opt1
;    [21:15] exit(4) 
;    exit(v:reg_rdi) 
;      inline: 21_15
;      alloc rdi
;      alias v -> rdi
       mov rdi, 4
;      [2:2] mov(rax,60) 
       mov rax, 60
;      [2:14] # exit system call 
;      [3:2] mov(rdi,v) 
;      [3:14] # return code 
;      [4:2] syscall 
       syscall
;      free rdi
     exit_21_15_end:
   if_21_5_end:
;  s: qword[rbp-56]
;  [23:5] var s = 1 | (x + z)
;  [23:9] s = 1 | (x + z)
;  [23:13] 1 | (x + z)
;  [23:13] 1 | (x + z)
;  [23:13] s=1 
   mov qword[rbp-56], 1
;  [23:18] s| (x + z)
;  alloc r15
;  [23:18] (x + z)
;  [23:18] r15=x 
   mov r15, qword[rbp-8]
;  [23:22] r15+ z
   add r15, qword[rbp-24]
   or qword[rbp-56], r15
;  free r15
   if_24_8:
;  [24:8] ? s != 6 
;  [24:8] ? s != 6 
   cmp_24_8:
   cmp qword[rbp-56], 6
   je if_24_5_end
   if_24_8_code:  ; opt1
;    [24:15] exit(5) 
;    exit(v:reg_rdi) 
;      inline: 24_15
;      alloc rdi
;      alias v -> rdi
       mov rdi, 5
;      [2:2] mov(rax,60) 
       mov rax, 60
;      [2:14] # exit system call 
;      [3:2] mov(rdi,v) 
;      [3:14] # return code 
;      [4:2] syscall 
       syscall
;      free rdi
     exit_24_15_end:
   if_24_5_end:
; main end

; system call: exit 0
mov rax, 60
mov rdi, 0
syscall

; max scratch registers in use: 2
;            max frames in use: 5
