; generated by baz

section .data
;[1:1] field hello="hello\n" 
hello db 'hello',10,''
hello.len equ $-hello
;[2:1] field world="world\n" 
world db 'world',10,''
world.len equ $-world

section .bss
stk resd 256
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
jmp main

foo:
;  [19:5] var len=world.len 
;  [19:9] len=world.len 
;  [19:13] world.len 
;  [19:13] len=world.len 
   mov qword[rsp-8],world.len
;  [20:5] print(len,world)
;    inline: 20_5
;    [5:5] mov(rcx,ptr)
     mov rcx,world
;    [6:5] mov(rdx,len)
     mov rdx,qword[rsp-8]
;    [7:5] mov(rbx,1)
     mov rbx,1
;    [8:5] mov(rax,4)
     mov rax,4
;    [9:5] int(0x80)
     int 0x80
   print_20_5_end:
   ret


bar:
;  n rsp+8
;  [24:5] loop
   loop_24_5:
     if_25_12:
;    [25:12] ? n=0 
;    [25:12] ? n=0 
     cmp_25_12:
     cmp qword[rsp+8],0
     jne if_25_9_end
     jmp if_25_12_code
     if_25_12_code:
;      [25:16] break 
       jmp loop_24_5_end
     if_25_9_end:
;    [26:9] print(hello.len,hello)
;      inline: 26_9
;      [5:5] mov(rcx,ptr)
       mov rcx,hello
;      [6:5] mov(rdx,len)
       mov rdx,hello.len
;      [7:5] mov(rbx,1)
       mov rbx,1
;      [8:5] mov(rax,4)
       mov rax,4
;      [9:5] int(0x80)
       int 0x80
     print_26_9_end:
;    [27:9] n=n-1 
;    [27:11] n-1 
;    [27:11] n=n
;    [27:13] n-1 
     sub qword[rsp+8],1
   jmp loop_24_5
   loop_24_5_end:
   ret

main:
;  [32:5] var a=2 
;  [32:9] a=2 
;  [32:11] 2 
;  [32:11] a=2 
   mov qword[rsp-8],2
;  [33:5] foo()
   sub rsp,8
   call foo
   add rsp,8
;  [34:5] bar(a+1)
   mov r15,rsp
   sub rsp,8
;    [34:9] a+1
;    [34:9] r14=a
     mov r14,qword[rsp-8]
;    [34:11] r14+1
     add r14,1
   push r14
   call bar
   add rsp,16
;  [35:5] exit(0)
;    inline: 35_5
;    [13:5] mov(rbx,v)
     mov rbx,0
;    [14:5] mov(rax,1)
     mov rax,1
;    [15:5] int(0x80)
     int 0x80
   exit_35_5_end:

;      max registers in use: 2
;         max frames in use: 3
;          max stack in use: 0
