; generated by baz

true equ 1
false equ 0

section .data
align 4
;[1:1] field hello = "hello world from baz\n" 
hello: db 'hello world from baz',10,''
hello.len equ $-hello
;[2:1] field input = "............................................................" 
input: db '............................................................'
input.len equ $-input
;[3:1] field prompt1 = "enter name:\n" 
prompt1: db 'enter name:',10,''
prompt1.len equ $-prompt1
;[4:1] field prompt2 = "that is not a name.\n" 
prompt2: db 'that is not a name.',10,''
prompt2.len equ $-prompt2
;[5:1] field prompt3 = "hello " 
prompt3: db 'hello '
prompt3.len equ $-prompt3
;[6:1] field dot = "." 
dot: db '.'
dot.len equ $-dot
;[7:1] field nl = "\n" 
nl: db '',10,''
nl.len equ $-nl

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

assert:
;  assert(expr : bool) 
   push rbp
   mov rbp, rsp
;  expr: byte[rbp+16]
   if_33_8:
;  [33:8] ? not expr 
;  [33:8] ? not expr 
   cmp_33_8:
   cmp byte[rbp+16], 0
   jne if_33_5_end
   if_33_8_code:  ; opt1
;    [33:17] exit(1) 
;    exit(v : reg_rdi) 
;      inline: 33_17
;      alloc rdi
;      alias v -> rdi
       mov rdi, 1
;      [10:5] mov(rax, 60) 
       mov rax, 60
;      [10:19] # exit system call 
;      [11:5] mov(rdi, v) 
;      [11:19] # return code 
;      [12:5] syscall() 
       syscall
;      free rdi
     exit_33_17_end:
   if_33_5_end:
   pop rbp
   ret

;[40:1] # inlined function arguments are equivalent to mutable references 
;[46:1] # default argument type is i64 
main:
;  p: qword[rbp-16]
;  [56:5] var p : point = {0, 0}
;  [56:9] p : point = {0, 0}
;  [56:21] {0, 0}
;    [56:21] {0, 0}
;    [56:22] 0
;    [56:22] 0
;    [56:22] p.x = 0
     mov qword[rbp-16], 0
;    [56:25] 0
;    [56:25] 0
;    [56:25] p.y = 0
     mov qword[rbp-8], 0
;  [57:5] foo(p) 
;  foo(p : point) 
;    inline: 57_5
;    alias p -> p
;    [42:5] p.x = 0b10 
;    [42:11] 0b10 
;    [42:11] 0b10 
;    [42:11] p.x = 0b10 
     mov qword[rbp-16], 0b10
;    [42:19] # binary value 2 
;    [43:5] p.y = 0xb 
;    [43:11] 0xb 
;    [43:11] 0xb 
;    [43:11] p.y = 0xb 
     mov qword[rbp-8], 0xb
;    [43:19] # hex value 11 
   foo_57_5_end:
;  [58:5] assert(p.x == 2) 
   sub rsp, 16
;  alloc r15
;    [58:12] p.x == 2
;    [58:12] ? p.x == 2
;    [58:12] ? p.x == 2
     cmp_58_12:
     cmp qword[rbp-16], 2
     jne bool_false_58_12
     bool_true_58_12:  ; opt1
     mov r15, true
     jmp bool_end_58_12
     bool_false_58_12:
     mov r15, false
     bool_end_58_12:
   push r15
;  free r15
   call assert
   add rsp, 24
;  [59:5] assert(p.y == 0xb) 
   sub rsp, 16
;  alloc r15
;    [59:12] p.y == 0xb
;    [59:12] ? p.y == 0xb
;    [59:12] ? p.y == 0xb
     cmp_59_12:
     cmp qword[rbp-8], 0xb
     jne bool_false_59_12
     bool_true_59_12:  ; opt1
     mov r15, true
     jmp bool_end_59_12
     bool_false_59_12:
     mov r15, false
     bool_end_59_12:
   push r15
;  free r15
   call assert
   add rsp, 24
;  arg: qword[rbp-24]
;  [61:5] var arg = 0 
;  [61:9] arg = 0 
;  [61:15] 0 
;  [61:15] 0 
;  [61:15] arg = 0 
   mov qword[rbp-24], 0
;  [62:5] bar(arg) 
;  bar(arg) 
;    inline: 62_5
;    alias arg -> arg
;    [48:5] arg = 0xff 
;    [48:11] 0xff 
;    [48:11] 0xff 
;    [48:11] arg = 0xff 
     mov qword[rbp-24], 0xff
   bar_62_5_end:
;  [63:5] assert(arg == 0xff) 
   sub rsp, 24
;  alloc r15
;    [63:12] arg == 0xff
;    [63:12] ? arg == 0xff
;    [63:12] ? arg == 0xff
     cmp_63_12:
     cmp qword[rbp-24], 0xff
     jne bool_false_63_12
     bool_true_63_12:  ; opt1
     mov r15, true
     jmp bool_end_63_12
     bool_false_63_12:
     mov r15, false
     bool_end_63_12:
   push r15
;  free r15
   call assert
   add rsp, 32
;  [65:5] arg = 1 
;  [65:11] 1 
;  [65:11] 1 
;  [65:11] arg = 1 
   mov qword[rbp-24], 1
;  [66:5] arg = baz(arg) 
;  [66:11] baz(arg) 
;  [66:11] baz(arg) 
;  [66:11] arg = baz(arg) 
;  [66:11] baz(arg) 
;  baz(arg) : i64 res 
;    inline: 66_11
;    alias res -> arg
;    alias arg -> arg
;    [52:5] res = arg * 2 
;    [52:11] arg * 2 
;    [52:11] arg * 2 
;    [52:11] res = arg 
;    [52:17] res * 2 
;    alloc r15
     mov r15, qword[rbp-24]
     imul r15, 2
     mov qword[rbp-24], r15
;    free r15
   baz_66_11_end:
;  [67:5] assert(arg == 2) 
   sub rsp, 24
;  alloc r15
;    [67:12] arg == 2
;    [67:12] ? arg == 2
;    [67:12] ? arg == 2
     cmp_67_12:
     cmp qword[rbp-24], 2
     jne bool_false_67_12
     bool_true_67_12:  ; opt1
     mov r15, true
     jmp bool_end_67_12
     bool_false_67_12:
     mov r15, false
     bool_end_67_12:
   push r15
;  free r15
   call assert
   add rsp, 32
;  x: qword[rbp-32]
;  [69:5] var x = 1 
;  [69:9] x = 1 
;  [69:13] 1 
;  [69:13] 1 
;  [69:13] x = 1 
   mov qword[rbp-32], 1
;  y: qword[rbp-40]
;  [70:5] var y = 2 
;  [70:9] y = 2 
;  [70:13] 2 
;  [70:13] 2 
;  [70:13] y = 2 
   mov qword[rbp-40], 2
;  o1: qword[rbp-60]
;  [72:5] var o1 : object = {{x * 10, y}, 0xff0000}
;  [72:9] o1 : object = {{x * 10, y}, 0xff0000}
;  [72:23] {{x * 10, y}, 0xff0000}
;    [72:23] {{x * 10, y}, 0xff0000}
;      [72:24] {x * 10, y}
;      [72:25] x * 10
;      alloc r15
;      [72:25] x * 10
;      [72:25] r15 = x 
       mov r15, qword[rbp-32]
;      [72:29] r15 * 10
       imul r15, 10
       mov qword[rbp-60], r15
;      free r15
;      [72:33] y
;      [72:33] y
;      [72:33] o1.pos.y = y
;      alloc r15
       mov r15, qword[rbp-40]
       mov qword[rbp-52], r15
;      free r15
;    [72:37] 0xff0000
;    [72:37] 0xff0000
;    [72:37] o1.color = 0xff0000
     mov dword[rbp-44], 0xff0000
;  [73:5] assert(o1.pos.x == 10) 
   sub rsp, 60
;  alloc r15
;    [73:12] o1.pos.x == 10
;    [73:12] ? o1.pos.x == 10
;    [73:12] ? o1.pos.x == 10
     cmp_73_12:
     cmp qword[rbp-60], 10
     jne bool_false_73_12
     bool_true_73_12:  ; opt1
     mov r15, true
     jmp bool_end_73_12
     bool_false_73_12:
     mov r15, false
     bool_end_73_12:
   push r15
;  free r15
   call assert
   add rsp, 68
;  [74:5] assert(o1.pos.y == 2) 
   sub rsp, 60
;  alloc r15
;    [74:12] o1.pos.y == 2
;    [74:12] ? o1.pos.y == 2
;    [74:12] ? o1.pos.y == 2
     cmp_74_12:
     cmp qword[rbp-52], 2
     jne bool_false_74_12
     bool_true_74_12:  ; opt1
     mov r15, true
     jmp bool_end_74_12
     bool_false_74_12:
     mov r15, false
     bool_end_74_12:
   push r15
;  free r15
   call assert
   add rsp, 68
;  [75:5] assert(o1.color == 0xff0000) 
   sub rsp, 60
;  alloc r15
;    [75:12] o1.color == 0xff0000
;    [75:12] ? o1.color == 0xff0000
;    [75:12] ? o1.color == 0xff0000
     cmp_75_12:
     cmp dword[rbp-44], 0xff0000
     jne bool_false_75_12
     bool_true_75_12:  ; opt1
     mov r15, true
     jmp bool_end_75_12
     bool_false_75_12:
     mov r15, false
     bool_end_75_12:
   push r15
;  free r15
   call assert
   add rsp, 68
;  p1: qword[rbp-76]
;  [77:5] var p1 : point = {-x, -y}
;  [77:9] p1 : point = {-x, -y}
;  [77:22] {-x, -y}
;    [77:22] {-x, -y}
;    [77:23] -x
;    [77:23] -x
;    [77:24] p1.x = -x
;    alloc r15
     mov r15, qword[rbp-32]
     mov qword[rbp-76], r15
;    free r15
     neg qword[rbp-76]
;    [77:27] -y
;    [77:27] -y
;    [77:28] p1.y = -y
;    alloc r15
     mov r15, qword[rbp-40]
     mov qword[rbp-68], r15
;    free r15
     neg qword[rbp-68]
;  [78:5] o1.pos = p1 
;  [78:14] p1 
;    [78:14] p1 
;    alloc r15
     mov r15, qword[rbp-76]
     mov qword[rbp-60], r15
;    free r15
;    alloc r15
     mov r15, qword[rbp-68]
     mov qword[rbp-52], r15
;    free r15
;  [79:5] assert(o1.pos.x == -1) 
   sub rsp, 76
;  alloc r15
;    [79:12] o1.pos.x == -1
;    [79:12] ? o1.pos.x == -1
;    [79:12] ? o1.pos.x == -1
     cmp_79_12:
     cmp qword[rbp-60], -1
     jne bool_false_79_12
     bool_true_79_12:  ; opt1
     mov r15, true
     jmp bool_end_79_12
     bool_false_79_12:
     mov r15, false
     bool_end_79_12:
   push r15
;  free r15
   call assert
   add rsp, 84
;  [80:5] assert(o1.pos.y == -2) 
   sub rsp, 76
;  alloc r15
;    [80:12] o1.pos.y == -2
;    [80:12] ? o1.pos.y == -2
;    [80:12] ? o1.pos.y == -2
     cmp_80_12:
     cmp qword[rbp-52], -2
     jne bool_false_80_12
     bool_true_80_12:  ; opt1
     mov r15, true
     jmp bool_end_80_12
     bool_false_80_12:
     mov r15, false
     bool_end_80_12:
   push r15
;  free r15
   call assert
   add rsp, 84
;  o2: qword[rbp-96]
;  [82:5] var o2 : object = o1 
;  [82:9] o2 : object = o1 
;  [82:23] o1 
;    [82:23] o1 
;      [82:23] o1 
;      alloc r15
       mov r15, qword[rbp-60]
       mov qword[rbp-96], r15
;      free r15
;      alloc r15
       mov r15, qword[rbp-52]
       mov qword[rbp-88], r15
;      free r15
;    alloc r15
     mov r15d, dword[rbp-44]
     mov dword[rbp-80], r15d
;    free r15
;  [83:5] assert(o2.pos.x == -1) 
   sub rsp, 96
;  alloc r15
;    [83:12] o2.pos.x == -1
;    [83:12] ? o2.pos.x == -1
;    [83:12] ? o2.pos.x == -1
     cmp_83_12:
     cmp qword[rbp-96], -1
     jne bool_false_83_12
     bool_true_83_12:  ; opt1
     mov r15, true
     jmp bool_end_83_12
     bool_false_83_12:
     mov r15, false
     bool_end_83_12:
   push r15
;  free r15
   call assert
   add rsp, 104
;  [84:5] assert(o2.pos.y == -2) 
   sub rsp, 96
;  alloc r15
;    [84:12] o2.pos.y == -2
;    [84:12] ? o2.pos.y == -2
;    [84:12] ? o2.pos.y == -2
     cmp_84_12:
     cmp qword[rbp-88], -2
     jne bool_false_84_12
     bool_true_84_12:  ; opt1
     mov r15, true
     jmp bool_end_84_12
     bool_false_84_12:
     mov r15, false
     bool_end_84_12:
   push r15
;  free r15
   call assert
   add rsp, 104
;  [85:5] assert(o2.color == 0xff0000) 
   sub rsp, 96
;  alloc r15
;    [85:12] o2.color == 0xff0000
;    [85:12] ? o2.color == 0xff0000
;    [85:12] ? o2.color == 0xff0000
     cmp_85_12:
     cmp dword[rbp-80], 0xff0000
     jne bool_false_85_12
     bool_true_85_12:  ; opt1
     mov r15, true
     jmp bool_end_85_12
     bool_false_85_12:
     mov r15, false
     bool_end_85_12:
   push r15
;  free r15
   call assert
   add rsp, 104
;  [87:5] print(hello.len, hello) 
;  print(len : reg_rdx, ptr : reg_rsi) 
;    inline: 87_5
;    alloc rdx
;    alias len -> rdx
     mov rdx, hello.len
;    alloc rsi
;    alias ptr -> rsi
     mov rsi, hello
;    [16:5] mov(rax, 1) 
     mov rax, 1
;    [16:19] # write system call 
;    [17:5] mov(rdi, 1) 
     mov rdi, 1
;    [17:19] # file descriptor for standard out 
;    [18:5] mov(rsi, ptr) 
;    [18:19] # buffer address 
;    [19:5] mov(rdx, len) 
;    [19:19] # buffer size 
;    [20:5] syscall() 
     syscall
;    free rsi
;    free rdx
   print_87_5_end:
;  [88:5] loop
   loop_88_5:
;    [89:9] print(prompt1.len, prompt1) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 89_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, prompt1.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, prompt1
;      [16:5] mov(rax, 1) 
       mov rax, 1
;      [16:19] # write system call 
;      [17:5] mov(rdi, 1) 
       mov rdi, 1
;      [17:19] # file descriptor for standard out 
;      [18:5] mov(rsi, ptr) 
;      [18:19] # buffer address 
;      [19:5] mov(rdx, len) 
;      [19:19] # buffer size 
;      [20:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_89_9_end:
;    len: qword[rbp-104]
;    [90:9] var len = read(input.len, input) - 1 
;    [90:13] len = read(input.len, input) - 1 
;    [90:19] read(input.len, input) - 1 
;    [90:19] read(input.len, input) - 1 
;    [90:19] len = read(input.len, input) 
;    [90:19] read(input.len, input) 
;    read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes 
;      inline: 90_19
;      alias nbytes -> len
;      alloc rdx
;      alias len -> rdx
       mov rdx, input.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, input
;      [24:5] mov(rax, 0) 
       mov rax, 0
;      [24:19] # read system call 
;      [25:5] mov(rdi, 0) 
       mov rdi, 0
;      [25:19] # file descriptor for standard input 
;      [26:5] mov(rsi, ptr) 
;      [26:19] # buffer address 
;      [27:5] mov(rdx, len) 
;      [27:19] # buffer size 
;      [28:5] syscall() 
       syscall
;      [29:5] mov(nbytes, rax) 
       mov qword[rbp-104], rax
;      [29:22] # return value 
;      free rsi
;      free rdx
     read_90_19_end:
;    [90:44] len - 1 
     sub qword[rbp-104], 1
;    [90:49] # -1 don't include the '\n' 
     if_91_12:
;    [91:12] ? len == 0 
;    [91:12] ? len == 0 
     cmp_91_12:
     cmp qword[rbp-104], 0
     jne if_91_9_end
     if_91_12_code:  ; opt1
;      [92:13] break 
       jmp loop_88_5_end
     if_91_9_end:
     if_94_12:
;    [94:12] ? len <= 4 
;    [94:12] ? len <= 4 
     cmp_94_12:
     cmp qword[rbp-104], 4
     jg if_94_9_end
     if_94_12_code:  ; opt1
;      [95:13] print(prompt2.len, prompt2) 
;      print(len : reg_rdx, ptr : reg_rsi) 
;        inline: 95_13
;        alloc rdx
;        alias len -> rdx
         mov rdx, prompt2.len
;        alloc rsi
;        alias ptr -> rsi
         mov rsi, prompt2
;        [16:5] mov(rax, 1) 
         mov rax, 1
;        [16:19] # write system call 
;        [17:5] mov(rdi, 1) 
         mov rdi, 1
;        [17:19] # file descriptor for standard out 
;        [18:5] mov(rsi, ptr) 
;        [18:19] # buffer address 
;        [19:5] mov(rdx, len) 
;        [19:19] # buffer size 
;        [20:5] syscall() 
         syscall
;        free rsi
;        free rdx
       print_95_13_end:
;      [96:13] continue 
       jmp loop_88_5
     if_94_9_end:
;    [98:9] print(prompt3.len, prompt3) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 98_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, prompt3.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, prompt3
;      [16:5] mov(rax, 1) 
       mov rax, 1
;      [16:19] # write system call 
;      [17:5] mov(rdi, 1) 
       mov rdi, 1
;      [17:19] # file descriptor for standard out 
;      [18:5] mov(rsi, ptr) 
;      [18:19] # buffer address 
;      [19:5] mov(rdx, len) 
;      [19:19] # buffer size 
;      [20:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_98_9_end:
;    [99:9] print(len, input) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 99_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, qword[rbp-104]
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, input
;      [16:5] mov(rax, 1) 
       mov rax, 1
;      [16:19] # write system call 
;      [17:5] mov(rdi, 1) 
       mov rdi, 1
;      [17:19] # file descriptor for standard out 
;      [18:5] mov(rsi, ptr) 
;      [18:19] # buffer address 
;      [19:5] mov(rdx, len) 
;      [19:19] # buffer size 
;      [20:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_99_9_end:
;    [100:9] print(dot.len, dot) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 100_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, dot.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, dot
;      [16:5] mov(rax, 1) 
       mov rax, 1
;      [16:19] # write system call 
;      [17:5] mov(rdi, 1) 
       mov rdi, 1
;      [17:19] # file descriptor for standard out 
;      [18:5] mov(rsi, ptr) 
;      [18:19] # buffer address 
;      [19:5] mov(rdx, len) 
;      [19:19] # buffer size 
;      [20:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_100_9_end:
;    [101:9] print(nl.len, nl) 
;    print(len : reg_rdx, ptr : reg_rsi) 
;      inline: 101_9
;      alloc rdx
;      alias len -> rdx
       mov rdx, nl.len
;      alloc rsi
;      alias ptr -> rsi
       mov rsi, nl
;      [16:5] mov(rax, 1) 
       mov rax, 1
;      [16:19] # write system call 
;      [17:5] mov(rdi, 1) 
       mov rdi, 1
;      [17:19] # file descriptor for standard out 
;      [18:5] mov(rsi, ptr) 
;      [18:19] # buffer address 
;      [19:5] mov(rdx, len) 
;      [19:19] # buffer size 
;      [20:5] syscall() 
       syscall
;      free rsi
;      free rdx
     print_101_9_end:
   jmp loop_88_5
   loop_88_5_end:
; main end

; system call: exit 0
mov rax, 60
mov rdi, 0
syscall

; max scratch registers in use: 1
;            max frames in use: 7
;        max inline stack size: 104 B
