; generated by baz

section .bss
stk resd 0x10000
stk.end:

true equ 1
false equ 0

section .data
;[1:1] field hello = "hello world from baz\n"
hello: db 'hello world from baz',10,''
hello.len equ $-hello
;[2:1] field input = "............................................................"
input: db '............................................................'
input.len equ $-input
;[3:1] field prompt1 = "enter name:\n"
prompt1: db 'enter name:',10,''
prompt1.len equ $-prompt1
;[4:1] field prompt2 = "that is not a name.\n"
prompt2: db 'that is not a name.',10,''
prompt2.len equ $-prompt2
;[5:1] field prompt3 = "hello "
prompt3: db 'hello '
prompt3.len equ $-prompt3
;[6:1] field dot = "."
dot: db '.'
dot.len equ $-dot
;[7:1] field nl = "\n"
nl: db '',10,''
nl.len equ $-nl

section .text
bits 64
global _start
_start:
mov rsp,stk.end
; program
;[9:1] # all functions are inlined
;[11:1] # arguments can be placed in specified register using `reg_...` syntax
main:
;    var x: i64 @ qword [rsp - 8]
;    [27:5]  var x = 1
;    [27:13] x =1
;    [27:13] 1
;    [27:13] 1
;    [28:5] x = 1
    mov qword [rsp - 8], 1
;    var y: i64 @ qword [rsp - 16]
;    [28:5] var y = 2
;    [28:13] y =2
;    [28:13] 2
;    [28:13] 2
;    [30:5] y = 2
    mov qword [rsp - 16], 2
;    var o1: object @ dword [rsp - 52]
;    [30:5] var o1 : object = {0xff0000, {x * 10, y}}
;    [30:23] o1 ={0xff0000, {x * 10, y}}
;    [30:23] {0xff0000, {x * 10, y}}
;    [30:23] {0xff0000, {x * 10, y}}
;    [30:24] 0xff0000
;    [30:24] 0xff0000
;    [30:32] o1.color = 0xff0000
    mov dword [rsp - 52], 0xff0000
;        [30:34] {x * 10, y}
;        [30:35] x * 10
;        [30:35] x * 10
;        [30:37] o1.pos.x = x
;        allocate scratch register -> r15
        mov r15, qword [rsp - 8]
        mov qword [rsp - 48], r15
;        free scratch register 'r15'
;        [30:41] o1.pos.x * 10
;        allocate scratch register -> r15
        mov r15, qword [rsp - 48]
        imul r15, 10
        mov qword [rsp - 48], r15
;        free scratch register 'r15'
;        [30:43]  y
;        [30:43] y
;        [30:44] o1.pos.y = y
;        allocate scratch register -> r15
        mov r15, qword [rsp - 16]
        mov qword [rsp - 40], r15
;        free scratch register 'r15'
;    [31:5]  assert(o1.pos.x == 10)
;    allocate scratch register -> r15
;    [31:12] o1.pos.x == 10
;    [31:12] ? o1.pos.x == 10
;    [31:12] ? o1.pos.x == 10
    cmp_31_12:
    cmp qword [rsp - 48], 10
    jne bool_false_31_12
    jmp bool_true_31_12
    bool_true_31_12:
    mov r15, true
    jmp bool_end_31_12
    bool_false_31_12:
    mov r15, false
    bool_end_31_12:
;    assert(expr : bool) 
    assert_31_5:
;        alias expr -> r15
        if_19_8_31_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_31_5:
        cmp r15, false
        jne if_19_5_31_5_end
        jmp if_19_8_31_5_code
        if_19_8_31_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_31_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_31_5_end:
        if_19_5_31_5_end:
;        free scratch register 'r15'
    assert_31_5_end:
;    [32:5] assert(o1.pos.y == 2)
;    allocate scratch register -> r15
;    [32:12] o1.pos.y == 2
;    [32:12] ? o1.pos.y == 2
;    [32:12] ? o1.pos.y == 2
    cmp_32_12:
    cmp qword [rsp - 40], 2
    jne bool_false_32_12
    jmp bool_true_32_12
    bool_true_32_12:
    mov r15, true
    jmp bool_end_32_12
    bool_false_32_12:
    mov r15, false
    bool_end_32_12:
;    assert(expr : bool) 
    assert_32_5:
;        alias expr -> r15
        if_19_8_32_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_32_5:
        cmp r15, false
        jne if_19_5_32_5_end
        jmp if_19_8_32_5_code
        if_19_8_32_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_32_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_32_5_end:
        if_19_5_32_5_end:
;        free scratch register 'r15'
    assert_32_5_end:
;    [33:5] assert(o1.color == 0xff0000)
;    allocate scratch register -> r15
;    [33:12] o1.color == 0xff0000
;    [33:12] ? o1.color == 0xff0000
;    [33:12] ? o1.color == 0xff0000
    cmp_33_12:
    cmp dword [rsp - 52], 0xff0000
    jne bool_false_33_12
    jmp bool_true_33_12
    bool_true_33_12:
    mov r15, true
    jmp bool_end_33_12
    bool_false_33_12:
    mov r15, false
    bool_end_33_12:
;    assert(expr : bool) 
    assert_33_5:
;        alias expr -> r15
        if_19_8_33_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_33_5:
        cmp r15, false
        jne if_19_5_33_5_end
        jmp if_19_8_33_5_code
        if_19_8_33_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_33_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_33_5_end:
        if_19_5_33_5_end:
;        free scratch register 'r15'
    assert_33_5_end:
;    var p1: point @ qword [rsp - 68]
;    [35:5] var p1 : point = {-x, -y}
;    [35:22] p1 ={-x, -y}
;    [35:22] {-x, -y}
;    [35:22] {-x, -y}
;    [35:23] -x
;    [35:23] -x
;    [35:25] p1.x = -x
;    allocate scratch register -> r15
    mov r15, qword [rsp - 8]
    mov qword [rsp - 68], r15
;    free scratch register 'r15'
    neg qword [rsp - 68]
;    [35:27]  -y
;    [35:27] -y
;    [35:29] p1.y = -y
;    allocate scratch register -> r15
    mov r15, qword [rsp - 16]
    mov qword [rsp - 60], r15
;    free scratch register 'r15'
    neg qword [rsp - 60]
;    [36:7]  o1.pos[1] = p1
;    allocate named register 'rsi'
;    allocate named register 'rdi'
;    allocate named register 'rcx'
;    allocate scratch register -> r15
    lea r15, [rsp - 52]
;    allocate scratch register -> r14
;    [36:12] 1
;    [36:12] 1
;    [36:13] r14 = 1
    mov r14, 1
    shl r14, 4
    add r15, r14
;    free scratch register 'r14'
    add r15, 4
    lea rdi, [r15]
;    [36:17]  p1
    lea rsi, [rsp - 68]
    mov rcx, 16
    rep movsb
;    free scratch register 'r15'
;    free named register 'rcx'
;    free named register 'rdi'
;    free named register 'rsi'
;    [37:5] assert(o1.pos[1].x == -1)
;    allocate scratch register -> r15
;    [37:12] o1.pos[1].x == -1
;    [37:12] ? o1.pos[1].x == -1
;    [37:12] ? o1.pos[1].x == -1
    cmp_37_12:
;    allocate scratch register -> r14
;        [37:12] o1.pos[1].x
;        [37:14] r14 = o1.pos[1].x
;        [37:14] o1.pos[1].x
;        allocate scratch register -> r13
        lea r13, [rsp - 52]
;        allocate scratch register -> r12
;        [37:19] 1
;        [37:19] 1
;        [37:20] r12 = 1
        mov r12, 1
        shl r12, 4
        add r13, r12
;        free scratch register 'r12'
        add r13, 4
        mov r14, qword [r13]
;        free scratch register 'r13'
    cmp r14, -1
;    free scratch register 'r14'
    jne bool_false_37_12
    jmp bool_true_37_12
    bool_true_37_12:
    mov r15, true
    jmp bool_end_37_12
    bool_false_37_12:
    mov r15, false
    bool_end_37_12:
;    assert(expr : bool) 
    assert_37_5:
;        alias expr -> r15
        if_19_8_37_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_37_5:
        cmp r15, false
        jne if_19_5_37_5_end
        jmp if_19_8_37_5_code
        if_19_8_37_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_37_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_37_5_end:
        if_19_5_37_5_end:
;        free scratch register 'r15'
    assert_37_5_end:
;    [38:5] assert(o1.pos[1].y == -2)
;    allocate scratch register -> r15
;    [38:12] o1.pos[1].y == -2
;    [38:12] ? o1.pos[1].y == -2
;    [38:12] ? o1.pos[1].y == -2
    cmp_38_12:
;    allocate scratch register -> r14
;        [38:12] o1.pos[1].y
;        [38:14] r14 = o1.pos[1].y
;        [38:14] o1.pos[1].y
;        allocate scratch register -> r13
        lea r13, [rsp - 52]
;        allocate scratch register -> r12
;        [38:19] 1
;        [38:19] 1
;        [38:20] r12 = 1
        mov r12, 1
        shl r12, 4
        add r13, r12
;        free scratch register 'r12'
        add r13, 12
        mov r14, qword [r13]
;        free scratch register 'r13'
    cmp r14, -2
;    free scratch register 'r14'
    jne bool_false_38_12
    jmp bool_true_38_12
    bool_true_38_12:
    mov r15, true
    jmp bool_end_38_12
    bool_false_38_12:
    mov r15, false
    bool_end_38_12:
;    assert(expr : bool) 
    assert_38_5:
;        alias expr -> r15
        if_19_8_38_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_38_5:
        cmp r15, false
        jne if_19_5_38_5_end
        jmp if_19_8_38_5_code
        if_19_8_38_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_38_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_38_5_end:
        if_19_5_38_5_end:
;        free scratch register 'r15'
    assert_38_5_end:
;    var o2: object @ dword [rsp - 104]
;    [40:5] var o2 : object = o1
;    [40:23] o2 =o1
;    allocate named register 'rsi'
;    allocate named register 'rdi'
;    allocate named register 'rcx'
    lea rdi, [rsp - 104]
;    [40:23] o1
    lea rsi, [rsp - 52]
    mov rcx, 36
    rep movsb
;    free named register 'rcx'
;    free named register 'rdi'
;    free named register 'rsi'
;    [41:5] assert(o2.pos[1].x == -1)
;    allocate scratch register -> r15
;    [41:12] o2.pos[1].x == -1
;    [41:12] ? o2.pos[1].x == -1
;    [41:12] ? o2.pos[1].x == -1
    cmp_41_12:
;    allocate scratch register -> r14
;        [41:12] o2.pos[1].x
;        [41:14] r14 = o2.pos[1].x
;        [41:14] o2.pos[1].x
;        allocate scratch register -> r13
        lea r13, [rsp - 104]
;        allocate scratch register -> r12
;        [41:19] 1
;        [41:19] 1
;        [41:20] r12 = 1
        mov r12, 1
        shl r12, 4
        add r13, r12
;        free scratch register 'r12'
        add r13, 4
        mov r14, qword [r13]
;        free scratch register 'r13'
    cmp r14, -1
;    free scratch register 'r14'
    jne bool_false_41_12
    jmp bool_true_41_12
    bool_true_41_12:
    mov r15, true
    jmp bool_end_41_12
    bool_false_41_12:
    mov r15, false
    bool_end_41_12:
;    assert(expr : bool) 
    assert_41_5:
;        alias expr -> r15
        if_19_8_41_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_41_5:
        cmp r15, false
        jne if_19_5_41_5_end
        jmp if_19_8_41_5_code
        if_19_8_41_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_41_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_41_5_end:
        if_19_5_41_5_end:
;        free scratch register 'r15'
    assert_41_5_end:
;    [42:5] assert(o2.pos[1].y == -2)
;    allocate scratch register -> r15
;    [42:12] o2.pos[1].y == -2
;    [42:12] ? o2.pos[1].y == -2
;    [42:12] ? o2.pos[1].y == -2
    cmp_42_12:
;    allocate scratch register -> r14
;        [42:12] o2.pos[1].y
;        [42:14] r14 = o2.pos[1].y
;        [42:14] o2.pos[1].y
;        allocate scratch register -> r13
        lea r13, [rsp - 104]
;        allocate scratch register -> r12
;        [42:19] 1
;        [42:19] 1
;        [42:20] r12 = 1
        mov r12, 1
        shl r12, 4
        add r13, r12
;        free scratch register 'r12'
        add r13, 12
        mov r14, qword [r13]
;        free scratch register 'r13'
    cmp r14, -2
;    free scratch register 'r14'
    jne bool_false_42_12
    jmp bool_true_42_12
    bool_true_42_12:
    mov r15, true
    jmp bool_end_42_12
    bool_false_42_12:
    mov r15, false
    bool_end_42_12:
;    assert(expr : bool) 
    assert_42_5:
;        alias expr -> r15
        if_19_8_42_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_42_5:
        cmp r15, false
        jne if_19_5_42_5_end
        jmp if_19_8_42_5_code
        if_19_8_42_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_42_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_42_5_end:
        if_19_5_42_5_end:
;        free scratch register 'r15'
    assert_42_5_end:
;    [43:5] assert(o2.color == 0xff0000)
;    allocate scratch register -> r15
;    [43:12] o2.color == 0xff0000
;    [43:12] ? o2.color == 0xff0000
;    [43:12] ? o2.color == 0xff0000
    cmp_43_12:
    cmp dword [rsp - 104], 0xff0000
    jne bool_false_43_12
    jmp bool_true_43_12
    bool_true_43_12:
    mov r15, true
    jmp bool_end_43_12
    bool_false_43_12:
    mov r15, false
    bool_end_43_12:
;    assert(expr : bool) 
    assert_43_5:
;        alias expr -> r15
        if_19_8_43_5:
;        [19:8] ? not expr
;        [19:8] ? not expr
        cmp_19_8_43_5:
        cmp r15, false
        jne if_19_5_43_5_end
        jmp if_19_8_43_5_code
        if_19_8_43_5_code:
;            [19:17] exit(1)
;            allocate named register 'rdi'
            mov rdi, 1
;            exit(v : reg_rdi) 
            exit_19_17_43_5:
;                alias v -> rdi
;                [13:5]  mov(rax, 60)
                mov rax, 60
;                [13:19] # exit system call
;                [14:5] mov(rdi, v)
;                [14:19] # return code
;                [15:5] syscall()
                syscall
;                free named register 'rdi'
            exit_19_17_43_5_end:
        if_19_5_43_5_end:
;        free scratch register 'r15'
    assert_43_5_end:
    ; system call: exit 0
    mov rax, 60
    mov rdi, 0
    syscall

; max scratch registers in use: 4
;            max frames in use: 7
;               max stack size: 104 B
