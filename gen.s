;
; generated by baz
;

DEFAULT REL

section .bss
stk resd 65536
stk.end:

true equ 1
false equ 0

section .data

section .text
bits 64
global _start
_start:
mov rsp,stk.end
; program
;[13:1] # size 85
;[21:1] # size 744
;[27:1] # size: 4320
main:
;   [40:5] var worlds : world[2]
;   [40:9] worlds: world[2] @ qword [rsp - 10432]
;   [40:9] clear array 2 * 5216 B = 10432 B
;   [40:5] allocate named register 'rdi'
;   [40:5] allocate named register 'rcx'
;   [40:5] allocate named register 'rax'
    lea rdi, [rsp - 10432]
    mov rcx, 10432
    xor rax, rax
    rep stosb
;   [40:5] free named register 'rax'
;   [40:5] free named register 'rcx'
;   [40:5] free named register 'rdi'
;   [41:5] fuz(worlds[1].locations[2].links)
;   [41:9] allocate scratch register -> r15
    lea r15, [rsp - 10432]
;   [41:9] allocate scratch register -> r14
;   [41:16] set array index
;   [41:16] 1
;   [41:16] 1
;   [41:16] r14 = 1
    mov r14, 1
    imul r14, 5216
    add r15, r14
;   [41:9] free scratch register 'r14'
;   [41:9] allocate scratch register -> r14
;   [41:29] set array index
;   [41:29] 2
;   [41:29] 2
;   [41:29] r14 = 2
    mov r14, 2
    imul r14, 744
    add r15, r14
;   [41:9] free scratch register 'r14'
    add r15, 72
;   [33:6] fuz(lnks: link[]) 
    fuz_41_5:
;       [41:5] alias lnks -> worlds.locations.links  (lea: r15, len: 8)
;       [34:5] lnks[1].loc = 0xba
;       [34:5] allocate scratch register -> r14
        mov r14, r15
;       [34:5] allocate scratch register -> r13
;       [34:10] set array index
;       [34:10] 1
;       [34:10] 1
;       [34:10] r13 = 1
        mov r13, 1
        imul r13, 85
        add r14, r13
;       [34:5] free scratch register 'r13'
        add r14, 81
;       [34:19] 0xba
;       [34:19] 0xba
;       [34:19] dword [r14] = 0xba
        mov dword [r14], 0xba
;       [34:5] free scratch register 'r14'
;       [35:5] lnks[1].pos.y = 0xab
;       [35:5] allocate scratch register -> r14
        mov r14, r15
;       [35:5] allocate scratch register -> r13
;       [35:10] set array index
;       [35:10] 1
;       [35:10] 1
;       [35:10] r13 = 1
        mov r13, 1
        imul r13, 85
        add r14, r13
;       [35:5] free scratch register 'r13'
        add r14, 8
;       [35:21] 0xab
;       [35:21] 0xab
;       [35:21] qword [r14] = 0xab
        mov qword [r14], 0xab
;       [35:5] free scratch register 'r14'
;       [36:5] array_copy(lnks[1], lnks[4], 1)
;       [36:5] allocate named register 'rsi'
;       [36:5] allocate named register 'rdi'
;       [36:5] allocate named register 'rcx'
;       [36:34] 1
;       [36:34] 1
;       [36:34] 1
;       [36:34] rcx = 1
        mov rcx, 1
;       [36:16] lnks[1]
;       [36:16] allocate scratch register -> r14
        mov r14, r15
;       [36:16] allocate scratch register -> r13
;       [36:21] set array index
;       [36:21] 1
;       [36:21] 1
;       [36:21] r13 = 1
        mov r13, 1
        imul r13, 85
        add r14, r13
;       [36:16] free scratch register 'r13'
        lea rsi, [r14]
;       [36:5] free scratch register 'r14'
;       [36:25] lnks[4]
;       [36:25] allocate scratch register -> r14
        mov r14, r15
;       [36:25] allocate scratch register -> r13
;       [36:30] set array index
;       [36:30] 4
;       [36:30] 4
;       [36:30] r13 = 4
        mov r13, 4
        imul r13, 85
        add r14, r13
;       [36:25] free scratch register 'r13'
        lea rdi, [r14]
;       [36:5] free scratch register 'r14'
        imul rcx, 85
        rep movsb
;       [36:5] free named register 'rcx'
;       [36:5] free named register 'rdi'
;       [36:5] free named register 'rsi'
;       [41:5] free scratch register 'r15'
    fuz_41_5_end:
;   [42:5] assert(worlds[1].locations[2].links[4].loc == 0xba)
;   [42:12] allocate scratch register -> r15
;   [42:12] worlds[1].locations[2].links[4].loc == 0xba
;   [42:12] ? worlds[1].locations[2].links[4].loc == 0xba
;   [42:12] ? worlds[1].locations[2].links[4].loc == 0xba
    cmp_42_12:
;   [42:12] allocate scratch register -> r14
;       [42:12] worlds[1].locations[2].links[4].loc
;       [42:12] r14 = worlds[1].locations[2].links[4].loc
;       [42:12] worlds[1].locations[2].links[4].loc
;       [42:12] allocate scratch register -> r13
        lea r13, [rsp - 10432]
;       [42:12] allocate scratch register -> r12
;       [42:19] set array index
;       [42:19] 1
;       [42:19] 1
;       [42:19] r12 = 1
        mov r12, 1
        imul r12, 5216
        add r13, r12
;       [42:12] free scratch register 'r12'
;       [42:12] allocate scratch register -> r12
;       [42:32] set array index
;       [42:32] 2
;       [42:32] 2
;       [42:32] r12 = 2
        mov r12, 2
        imul r12, 744
        add r13, r12
;       [42:12] free scratch register 'r12'
;       [42:12] allocate scratch register -> r12
;       [42:41] set array index
;       [42:41] 4
;       [42:41] 4
;       [42:41] r12 = 4
        mov r12, 4
        imul r12, 85
        add r13, r12
;       [42:12] free scratch register 'r12'
        add r13, 153
        movsx r14, dword [r13]
;       [42:12] free scratch register 'r13'
    cmp r14, 0xba
;   [42:12] free scratch register 'r14'
    jne bool_false_42_12
    jmp bool_true_42_12
    bool_true_42_12:
    mov r15, true
    jmp bool_end_42_12
    bool_false_42_12:
    mov r15, false
    bool_end_42_12:
;   [7:6] assert(expr : bool) 
    assert_42_5:
;       [42:5] alias expr -> r15  (lea: , len: 0)
        if_8_8_42_5:
;       [8:8] ? not expr
;       [8:8] ? not expr
        cmp_8_8_42_5:
        test r15, r15
        jne if_8_5_42_5_end
        jmp if_8_8_42_5_code
        if_8_8_42_5_code:
;           [8:17] exit(1)
;           [8:22] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_8_17_42_5:
;               [8:17] alias v -> rdi  (lea: , len: 0)
;               [2:5] mov(rax, 60)
                mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [8:17] free named register 'rdi'
            exit_8_17_42_5_end:
        if_8_5_42_5_end:
;       [42:5] free scratch register 'r15'
    assert_42_5_end:
;   [43:5] assert(worlds[1].locations[2].links[4].pos.y == 0xab)
;   [43:12] allocate scratch register -> r15
;   [43:12] worlds[1].locations[2].links[4].pos.y == 0xab
;   [43:12] ? worlds[1].locations[2].links[4].pos.y == 0xab
;   [43:12] ? worlds[1].locations[2].links[4].pos.y == 0xab
    cmp_43_12:
;   [43:12] allocate scratch register -> r14
;       [43:12] worlds[1].locations[2].links[4].pos.y
;       [43:12] r14 = worlds[1].locations[2].links[4].pos.y
;       [43:12] worlds[1].locations[2].links[4].pos.y
;       [43:12] allocate scratch register -> r13
        lea r13, [rsp - 10432]
;       [43:12] allocate scratch register -> r12
;       [43:19] set array index
;       [43:19] 1
;       [43:19] 1
;       [43:19] r12 = 1
        mov r12, 1
        imul r12, 5216
        add r13, r12
;       [43:12] free scratch register 'r12'
;       [43:12] allocate scratch register -> r12
;       [43:32] set array index
;       [43:32] 2
;       [43:32] 2
;       [43:32] r12 = 2
        mov r12, 2
        imul r12, 744
        add r13, r12
;       [43:12] free scratch register 'r12'
;       [43:12] allocate scratch register -> r12
;       [43:41] set array index
;       [43:41] 4
;       [43:41] 4
;       [43:41] r12 = 4
        mov r12, 4
        imul r12, 85
        add r13, r12
;       [43:12] free scratch register 'r12'
        add r13, 80
        mov r14, qword [r13]
;       [43:12] free scratch register 'r13'
    cmp r14, 0xab
;   [43:12] free scratch register 'r14'
    jne bool_false_43_12
    jmp bool_true_43_12
    bool_true_43_12:
    mov r15, true
    jmp bool_end_43_12
    bool_false_43_12:
    mov r15, false
    bool_end_43_12:
;   [7:6] assert(expr : bool) 
    assert_43_5:
;       [43:5] alias expr -> r15  (lea: , len: 0)
        if_8_8_43_5:
;       [8:8] ? not expr
;       [8:8] ? not expr
        cmp_8_8_43_5:
        test r15, r15
        jne if_8_5_43_5_end
        jmp if_8_8_43_5_code
        if_8_8_43_5_code:
;           [8:17] exit(1)
;           [8:22] allocate named register 'rdi'
            mov rdi, 1
;           [1:6] exit(v : reg_rdi) 
            exit_8_17_43_5:
;               [8:17] alias v -> rdi  (lea: , len: 0)
;               [2:5] mov(rax, 60)
                mov rax, 60
;               [2:19] # exit system call
;               [3:5] mov(rdi, v)
;               [3:19] # return code
;               [4:5] syscall()
                syscall
;               [8:17] free named register 'rdi'
            exit_8_17_43_5_end:
        if_8_5_43_5_end:
;       [43:5] free scratch register 'r15'
    assert_43_5_end:
    ; system call: exit 0
    mov rax, 60
    mov rdi, 0
    syscall


; max scratch registers in use: 4
;            max frames in use: 7
;               max stack size: 10432 B
