; generated by baz

true equ 1
false equ 0

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

assert:
;  assert(expr : bool) 
   push rbp
   mov rbp, rsp
;  expr: byte[rbp+16]
   if_8_8:
;  [8:8] ? not expr 
;  [8:8] ? not expr 
   cmp_8_8:
   cmp byte[rbp+16], 0
   jne if_8_5_end
   if_8_8_code:  ; opt1
;    [8:17] exit(1) 
;    exit(v : reg_rdi) 
;      inline: 8_17
;      alloc rdi
;      alias v -> rdi
       mov rdi, 1
;      [2:5] mov(rax, 60) 
       mov rax, 60
;      [2:19] # exit system call 
;      [3:5] mov(rdi, v) 
;      [3:19] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_8_17_end:
   if_8_5_end:
   pop rbp
   ret

main:
;  a: dword[rbp-4]
;  [16:5] var a : i32 = 10 
;  [16:9] a : i32 = 10 
;  [16:19] 10 
;  [16:19] 10 
;  [16:19] a=10 
   mov dword[rbp-4], 10
;  pos: qword[rbp-19]
;  [17:5] var pos : vector = {a, a + 1, 12, 13}
;  [17:9] pos : vector = {a, a + 1, 12, 13}
;  [17:24] {a, a + 1, 12, 13}
;    [17:25] {a, a + 1, 12, 13}
;    [17:25] a
;    [17:25] a
;    [17:25] pos.x=a
;    alloc r15
     movsx r15, dword[rbp-4]
     mov qword[rbp-19], r15
;    free r15
;    [17:28] a + 1
;    [17:28] a + 1
;    [17:28] pos.y=a 
;    alloc r15
     mov r15d, dword[rbp-4]
     mov dword[rbp-11], r15d
;    free r15
;    [17:32] pos.y+ 1
     add dword[rbp-11], 1
;    [17:35] 12
;    [17:35] 12
;    [17:35] pos.z=12
     mov word[rbp-7], 12
;    [17:39] 13
;    [17:39] 13
;    [17:39] pos.w=13
     mov byte[rbp-5], 13
;  [18:5] assert(pos.x == 10) 
   sub rsp, 19
;  alloc r15
;    [18:12] pos.x == 10
;    [18:12] ? pos.x == 10
;    [18:12] ? pos.x == 10
     cmp_18_12:
     cmp qword[rbp-19], 10
     jne false_18_12
     true_18_12:  ; opt1
     mov r15, 1
     jmp end_18_12
     false_18_12:
     mov r15, 0
     end_18_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [19:5] assert(pos.y == 11) 
   sub rsp, 19
;  alloc r15
;    [19:12] pos.y == 11
;    [19:12] ? pos.y == 11
;    [19:12] ? pos.y == 11
     cmp_19_12:
     cmp dword[rbp-11], 11
     jne false_19_12
     true_19_12:  ; opt1
     mov r15, 1
     jmp end_19_12
     false_19_12:
     mov r15, 0
     end_19_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [20:5] assert(pos.z == 12) 
   sub rsp, 19
;  alloc r15
;    [20:12] pos.z == 12
;    [20:12] ? pos.z == 12
;    [20:12] ? pos.z == 12
     cmp_20_12:
     cmp word[rbp-7], 12
     jne false_20_12
     true_20_12:  ; opt1
     mov r15, 1
     jmp end_20_12
     false_20_12:
     mov r15, 0
     end_20_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [21:5] assert(pos.w == 13) 
   sub rsp, 19
;  alloc r15
;    [21:12] pos.w == 13
;    [21:12] ? pos.w == 13
;    [21:12] ? pos.w == 13
     cmp_21_12:
     cmp byte[rbp-5], 13
     jne false_21_12
     true_21_12:  ; opt1
     mov r15, 1
     jmp end_21_12
     false_21_12:
     mov r15, 0
     end_21_12:
   push r15
;  free r15
   call assert
   add rsp, 27
; main end

; system call: exit 0
mov rax, 60
mov rdi, 0
syscall

; max scratch registers in use: 1
;            max frames in use: 5
