; generated by baz

section .data
align 4

section .bss
align 4
stk resd 256
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main
fib:
;  i: rsp+16
   push rbp
   mov rbp,rsp
   if_8_8:
;  [8:8] ? i=0 
;  [8:8] ? i=0 
   cmp_8_8:
   cmp qword[rbp+16],0
   jne if_8_5_end
   if_8_8_code:  ; opt1
;    [9:9] res=1 
;    [9:13] 1 
;    [9:13] res=1 
     mov rax,1
;    [10:9] return 
     pop rbp
     ret
   if_8_5_end:
;  [12:5] var r=i*fib(i-1)
;  [12:9] r=i*fib(i-1)
;  [12:11] i*fib(i-1)
;  [12:11] r=i
   mov r15,qword[rbp+16]
   mov qword[rbp-8],r15
;  [12:13] r*fib(i-1)
;  [12:13] fib(i-1)
   sub rsp,8
   push r15
;    [12:17] i-1
;    [12:17] r14=i
     mov r14,qword[rbp+16]
;    [12:19] r14-1
     sub r14,1
   push r14
   call fib
   add rsp,8
   pop r15
   add rsp,8
   mov r15,rax
   imul r15,qword[rbp-8]
   mov qword[rbp-8],r15
;  [13:5] res=r 
;  [13:9] r 
;  [13:9] res=r 
   mov rax,qword[rbp-8]
   pop rbp
   ret

main:
;  [17:5] exit(fib(5))
;    [17:10] fib(5)
;    [17:10] rbx=fib(5)
;    [17:10] fib(5)
     push rbx
     push 5
     call fib
     add rsp,8
     pop rbx
     mov rbx,rax
;    inline: 17_5
;    [2:5] mov(rbx,v)
;    [3:5] mov(rax,1)
     mov rax,1
;    [4:5] int(0x80)
     int 0x80
   exit_17_5_end:

; max scratch registers in use: 3
;            max frames in use: 4

