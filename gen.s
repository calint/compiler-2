; generated by baz

section .data
align 4
;[1:1] field name="............................................................" 
name db '............................................................'
name.len equ $-name

section .bss
align 4
stk resd 256
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

foo:
;  foo(x):res 
;  res: qword[rbp-8]
;  x: qword[rbp+16]
   push rbp
   mov rbp,rsp
;  [10:5] res=-x*2 
;  alloc r15
;  [10:9] -x*2 
;  [10:10] r15=-x
   mov r15,qword[rbp+16]
   neg r15
;  [10:12] r15*2 
   imul r15,2
   mov qword[rbp-8],r15
;  free r15
   mov rax,qword[rbp-8]
   pop rbp
   ret

bar:
;  bar(y):res 
;  res: qword[rbp-8]
;  y: qword[rbp+16]
   push rbp
   mov rbp,rsp
;  [14:5] res=-y 
;  alloc r15
;  [14:9] -y 
;  [14:10] r15=-y 
   mov r15,qword[rbp+16]
   neg r15
   mov qword[rbp-8],r15
;  free r15
   mov rax,qword[rbp-8]
   pop rbp
   ret

main:
;  [18:5] var a=1 
;  a: qword[rbp-8]
;  [18:9] a=1 
;  [18:11] 1 
;  [18:11] a=1 
   mov qword[rbp-8],1
;  [19:5] var b=-foo(-bar(-a))
;  b: qword[rbp-16]
;  [19:9] b=-foo(-bar(-a))
;  [19:11] -foo(-bar(-a))
;  [19:12] b=-foo(-bar(-a))
;  [19:12] -foo(-bar(-a))
   sub rsp,16
;  alloc r15
;    [19:16] -bar(-a)
;    [19:17] r15=-bar(-a)
;    [19:17] -bar(-a)
;    alloc r14
     mov r14,qword[rbp-8]
     neg r14
     push r14
;    free r14
     call bar
     add rsp,8
     neg rax
     mov r15,rax
   push r15
;  free r15
   call foo
   add rsp,24
   neg rax
   mov qword[rbp-16],rax
   if_20_7:
;  [20:8] ? b=-2
   cmp_20_8:
   cmp qword[rbp-16],-2
   jne if_20_5_end
   if_20_7_code:  ; opt1
;    [21:9] exit(0)
;    exit(v:reg_rdi) 
;      inline: 21_9
;      alloc rdi
;      alias v -> rdi
       mov rdi,0
;      [4:5] mov(rax,60)
       mov rax,60
;      [4:17] # exit system call 
;      [5:5] mov(rdi,v)
;      [5:17] # return code 
;      [6:5] syscall 
       syscall
;      free rdi
     exit_21_9_end:
   if_20_5_end:
;  [22:5] exit(1)
;  exit(v:reg_rdi) 
;    inline: 22_5
;    alloc rdi
;    alias v -> rdi
     mov rdi,1
;    [4:5] mov(rax,60)
     mov rax,60
;    [4:17] # exit system call 
;    [5:5] mov(rdi,v)
;    [5:17] # return code 
;    [6:5] syscall 
     syscall
;    free rdi
   exit_22_5_end:

; max scratch registers in use: 3
;            max frames in use: 5

