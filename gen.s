; generated by baz

section .data
;[15:1] field hello{"hello world\n"}
hello db 'hello world',10,''
hello.len equ $-hello
;[16:1] field one{"one\n"}
one db 'one',10,''
one.len equ $-one

section .bss
stk resd 256
stk.end:

section .text
bits 32
align 4
global _start
_start:
mov ebp,stk
mov esp,stk.end
;  [19:5] print(hello.len,hello)
;    [8:5] mov(ecx,ptr)
     mov ecx,hello
;    [9:5] mov(edx,len)
     mov edx,hello.len
;    [10:5] mov(ebx,1)
     mov ebx,1
;    [11:5] mov(eax,4)
     mov eax,4
;    [12:5] int(0x80)
     int 0x80
   print_19_5_end:
;  [20:5] var a=1 
;  [20:9] a=1 
;  [20:11] 1 
;  [20:11] a=1 
   mov dword[ebp+0],1
;  [21:5] var b=2 
;  [21:9] b=2 
;  [21:11] 2 
;  [21:11] b=2 
   mov dword[ebp+4],2
;  [22:5] var c=3 
;  [22:9] c=3 
;  [22:11] 3 
;  [22:11] c=3 
   mov dword[ebp+8],3
;  [23:5] var d=4 
;  [23:9] d=4 
;  [23:11] 4 
;  [23:11] d=4 
   mov dword[ebp+12],4
;  [24:5] var n=10 
;  [24:9] n=10 
;  [24:11] 10 
;  [24:11] n=10 
   mov dword[ebp+16],10
;  [25:5] loop
   loop_25_5:
     if_26_10:
;    [26:10] ? n=0 
;    [26:10] ? n=0 
     cmp_26_10:
     cmp dword[ebp+16],0
     jne if_26_7_end
     if_26_10_code:  ; opt1
;      [26:14] break 
       jmp loop_25_5_end
     if_26_7_end:
;    [27:7] var r=((a+b)*c+d)*2 
;    [27:11] r=((a+b)*c+d)*2 
;    [27:13] ((a+b)*c+d)*2 
;    [27:14] edi=((a+b)*c+d)
;    [27:14] ((a+b)*c+d)
;    [27:15] edi=(a+b)
;    [27:15] (a+b)
;    [27:15] edi=a
     mov edi,dword[ebp+0]
;    [27:17] edi+b
     add edi,dword[ebp+4]
;    [27:20] edi*c
     imul edi,dword[ebp+8]
;    [27:22] edi+d
     add edi,dword[ebp+12]
;    [27:25] edi*2 
     imul edi,2
     mov dword[ebp+20],edi
;    [28:7] n=n-1 
;    [28:9] n-1 
;    [28:9] n=n
;    [28:11] n-1 
     sub dword[ebp+16],1
     if_29_10:
;    [29:10] ? not n=1 
;    [29:10] ? not n=1 
     cmp_29_10:
     cmp dword[ebp+16],1
     je if_29_7_end
     if_29_10_code:  ; opt1
;      [29:18] continue 
       jmp loop_25_5
     if_29_7_end:
;    [30:7] print(one.len,one)
;      [8:5] mov(ecx,ptr)
       mov ecx,one
;      [9:5] mov(edx,len)
       mov edx,one.len
;      [10:5] mov(ebx,1)
       mov ebx,1
;      [11:5] mov(eax,4)
       mov eax,4
;      [12:5] int(0x80)
       int 0x80
     print_30_7_end:
   jmp loop_25_5
   loop_25_5_end:
;  [32:5] exit(0)
;    [2:5] mov(ebx,v)
     mov ebx,0
;    [3:5] mov(eax,1)
     mov eax,1
;    [4:5] int(0x80)
     int 0x80
   exit_32_5_end:

;           max regs in use: 1
;         max frames in use: 3
;          max stack in use: 6

