; generated by baz

true equ 1
false equ 0

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

assert:
;  assert(expr : bool) 
   push rbp
   mov rbp, rsp
;  expr: byte[rbp+16]
   if_8_8:
;  [8:8] ? not expr 
;  [8:8] ? not expr 
   cmp_8_8:
   cmp byte[rbp+16], 0
   jne if_8_5_end
   if_8_8_code:  ; opt1
;    [8:17] exit(1) 
;    exit(v : reg_rdi) 
;      inline: 8_17
;      alloc rdi
;      alias v -> rdi
       mov rdi, 1
;      [2:5] mov(rax, 60) 
       mov rax, 60
;      [2:19] # exit system call 
;      [3:5] mov(rdi, v) 
;      [3:19] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_8_17_end:
   if_8_5_end:
   pop rbp
   ret

main:
;  x: dword[rbp-4]
;  [18:5] var x : i32 = 10 
;  [18:9] x : i32 = 10 
;  [18:19] 10 
;  [18:19] 10 
;  [18:19] x=10 
   mov dword[rbp-4], 10
;  v1: qword[rbp-19]
;  [19:5] var v1 : vector = {x, 2 * x, 12, 13}
;  [19:9] v1 : vector = {x, 2 * x, 12, 13}
;  [19:23] {x, 2 * x, 12, 13}
;    [19:23] {x, 2 * x, 12, 13}
;    [19:24] x
;    [19:24] x
;    [19:24] v1.x=x
;    alloc r15
     movsx r15, dword[rbp-4]
     mov qword[rbp-19], r15
;    free r15
;    [19:27] 2 * x
;    [19:27] 2 * x
;    [19:27] v1.y=2 
     mov dword[rbp-11], 2
;    [19:31] v1.y* x
;    alloc r15
     movsx r15, dword[rbp-11]
;    alloc r14
     movsx r14, dword[rbp-4]
     imul r15, r14
;    free r14
     mov dword[rbp-11], r15d
;    free r15
;    [19:34] 12
;    [19:34] 12
;    [19:34] v1.z=12
     mov word[rbp-7], 12
;    [19:38] 13
;    [19:38] 13
;    [19:38] v1.w=13
     mov byte[rbp-5], 13
;  [20:5] assert(v1.x == 10) 
   sub rsp, 19
;  alloc r15
;    [20:12] v1.x == 10
;    [20:12] ? v1.x == 10
;    [20:12] ? v1.x == 10
     cmp_20_12:
     cmp qword[rbp-19], 10
     jne false_20_12
     true_20_12:  ; opt1
     mov r15, 1
     jmp end_20_12
     false_20_12:
     mov r15, 0
     end_20_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [21:5] assert(v1.y == 20) 
   sub rsp, 19
;  alloc r15
;    [21:12] v1.y == 20
;    [21:12] ? v1.y == 20
;    [21:12] ? v1.y == 20
     cmp_21_12:
     cmp dword[rbp-11], 20
     jne false_21_12
     true_21_12:  ; opt1
     mov r15, 1
     jmp end_21_12
     false_21_12:
     mov r15, 0
     end_21_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [22:5] assert(v1.z == 12) 
   sub rsp, 19
;  alloc r15
;    [22:12] v1.z == 12
;    [22:12] ? v1.z == 12
;    [22:12] ? v1.z == 12
     cmp_22_12:
     cmp word[rbp-7], 12
     jne false_22_12
     true_22_12:  ; opt1
     mov r15, 1
     jmp end_22_12
     false_22_12:
     mov r15, 0
     end_22_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  [23:5] assert(v1.w == 13) 
   sub rsp, 19
;  alloc r15
;    [23:12] v1.w == 13
;    [23:12] ? v1.w == 13
;    [23:12] ? v1.w == 13
     cmp_23_12:
     cmp byte[rbp-5], 13
     jne false_23_12
     true_23_12:  ; opt1
     mov r15, 1
     jmp end_23_12
     false_23_12:
     mov r15, 0
     end_23_12:
   push r15
;  free r15
   call assert
   add rsp, 27
;  v2: qword[rbp-34]
;  [25:5] var v2 : vector = v1 
;  [25:9] v2 : vector = v1 
;  [25:23] v1 
;    [25:23] v1 
;    alloc r15
     mov r15, qword[rbp-19]
     mov qword[rbp-34], r15
;    free r15
;    alloc r15
     mov r15d, dword[rbp-11]
     mov dword[rbp-26], r15d
;    free r15
;    alloc r15
     mov r15w, word[rbp-7]
     mov word[rbp-22], r15w
;    free r15
;    alloc r15
     mov r15b, byte[rbp-5]
     mov byte[rbp-20], r15b
;    free r15
;  obj: qword[rbp-65]
;  [27:5] var obj : object = {{x + x, 2, 3, 4}, {5, 6, 7, 8}, true}
;  [27:9] obj : object = {{x + x, 2, 3, 4}, {5, 6, 7, 8}, true}
;  [27:24] {{x + x, 2, 3, 4}, {5, 6, 7, 8}, true}
;    [27:24] {{x + x, 2, 3, 4}, {5, 6, 7, 8}, true}
;      [27:25] {x + x, 2, 3, 4}
;      [27:26] x + x
;      [27:26] x + x
;      [27:26] obj.pos.x=x 
;      alloc r15
       movsx r15, dword[rbp-4]
       mov qword[rbp-65], r15
;      free r15
;      [27:30] obj.pos.x+ x
;      alloc r15
       movsx r15, dword[rbp-4]
       add qword[rbp-65], r15
;      free r15
;      [27:33] 2
;      [27:33] 2
;      [27:33] obj.pos.y=2
       mov dword[rbp-57], 2
;      [27:36] 3
;      [27:36] 3
;      [27:36] obj.pos.z=3
       mov word[rbp-53], 3
;      [27:39] 4
;      [27:39] 4
;      [27:39] obj.pos.w=4
       mov byte[rbp-51], 4
;      [27:43] {5, 6, 7, 8}
;      [27:44] 5
;      [27:44] 5
;      [27:44] obj.vel.x=5
       mov qword[rbp-50], 5
;      [27:47] 6
;      [27:47] 6
;      [27:47] obj.vel.y=6
       mov dword[rbp-42], 6
;      [27:50] 7
;      [27:50] 7
;      [27:50] obj.vel.z=7
       mov word[rbp-38], 7
;      [27:53] 8
;      [27:53] 8
;      [27:53] obj.vel.w=8
       mov byte[rbp-36], 8
;    [27:57] true
     mov byte[rbp-35], true
;  [28:5] assert(obj.pos.x == 20) 
   sub rsp, 65
;  alloc r15
;    [28:12] obj.pos.x == 20
;    [28:12] ? obj.pos.x == 20
;    [28:12] ? obj.pos.x == 20
     cmp_28_12:
     cmp qword[rbp-65], 20
     jne false_28_12
     true_28_12:  ; opt1
     mov r15, 1
     jmp end_28_12
     false_28_12:
     mov r15, 0
     end_28_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [29:5] assert(obj.pos.y == 2) 
   sub rsp, 65
;  alloc r15
;    [29:12] obj.pos.y == 2
;    [29:12] ? obj.pos.y == 2
;    [29:12] ? obj.pos.y == 2
     cmp_29_12:
     cmp dword[rbp-57], 2
     jne false_29_12
     true_29_12:  ; opt1
     mov r15, 1
     jmp end_29_12
     false_29_12:
     mov r15, 0
     end_29_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [30:5] assert(obj.pos.z == 3) 
   sub rsp, 65
;  alloc r15
;    [30:12] obj.pos.z == 3
;    [30:12] ? obj.pos.z == 3
;    [30:12] ? obj.pos.z == 3
     cmp_30_12:
     cmp word[rbp-53], 3
     jne false_30_12
     true_30_12:  ; opt1
     mov r15, 1
     jmp end_30_12
     false_30_12:
     mov r15, 0
     end_30_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [31:5] assert(obj.pos.w == 4) 
   sub rsp, 65
;  alloc r15
;    [31:12] obj.pos.w == 4
;    [31:12] ? obj.pos.w == 4
;    [31:12] ? obj.pos.w == 4
     cmp_31_12:
     cmp byte[rbp-51], 4
     jne false_31_12
     true_31_12:  ; opt1
     mov r15, 1
     jmp end_31_12
     false_31_12:
     mov r15, 0
     end_31_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [32:5] assert(obj.vel.x == 5) 
   sub rsp, 65
;  alloc r15
;    [32:12] obj.vel.x == 5
;    [32:12] ? obj.vel.x == 5
;    [32:12] ? obj.vel.x == 5
     cmp_32_12:
     cmp qword[rbp-50], 5
     jne false_32_12
     true_32_12:  ; opt1
     mov r15, 1
     jmp end_32_12
     false_32_12:
     mov r15, 0
     end_32_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [33:5] assert(obj.vel.y == 6) 
   sub rsp, 65
;  alloc r15
;    [33:12] obj.vel.y == 6
;    [33:12] ? obj.vel.y == 6
;    [33:12] ? obj.vel.y == 6
     cmp_33_12:
     cmp dword[rbp-42], 6
     jne false_33_12
     true_33_12:  ; opt1
     mov r15, 1
     jmp end_33_12
     false_33_12:
     mov r15, 0
     end_33_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [34:5] assert(obj.vel.z == 7) 
   sub rsp, 65
;  alloc r15
;    [34:12] obj.vel.z == 7
;    [34:12] ? obj.vel.z == 7
;    [34:12] ? obj.vel.z == 7
     cmp_34_12:
     cmp word[rbp-38], 7
     jne false_34_12
     true_34_12:  ; opt1
     mov r15, 1
     jmp end_34_12
     false_34_12:
     mov r15, 0
     end_34_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [35:5] assert(obj.vel.w == 8) 
   sub rsp, 65
;  alloc r15
;    [35:12] obj.vel.w == 8
;    [35:12] ? obj.vel.w == 8
;    [35:12] ? obj.vel.w == 8
     cmp_35_12:
     cmp byte[rbp-36], 8
     jne false_35_12
     true_35_12:  ; opt1
     mov r15, 1
     jmp end_35_12
     false_35_12:
     mov r15, 0
     end_35_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  [36:5] assert(obj.valid == true) 
   sub rsp, 65
;  alloc r15
;    [36:12] obj.valid == true
;    [36:12] ? obj.valid == true
;    [36:12] ? obj.valid == true
     cmp_36_12:
     cmp byte[rbp-35], true
     jne false_36_12
     true_36_12:  ; opt1
     mov r15, 1
     jmp end_36_12
     false_36_12:
     mov r15, 0
     end_36_12:
   push r15
;  free r15
   call assert
   add rsp, 73
;  p: qword[rbp-80]
;  [38:5] var p : vector = {-1, -2, -3, -4}
;  [38:9] p : vector = {-1, -2, -3, -4}
;  [38:22] {-1, -2, -3, -4}
;    [38:22] {-1, -2, -3, -4}
;    [38:23] -1
;    [38:23] -1
;    [38:24] p.x=-1
     mov qword[rbp-80], -1
;    [38:27] -2
;    [38:27] -2
;    [38:28] p.y=-2
     mov dword[rbp-72], -2
;    [38:31] -3
;    [38:31] -3
;    [38:32] p.z=-3
     mov word[rbp-68], -3
;    [38:35] -4
;    [38:35] -4
;    [38:36] p.w=-4
     mov byte[rbp-66], -4
;  [39:5] obj.pos = p 
;  [39:15] p 
;    [39:15] p 
;    alloc r15
     mov r15, qword[rbp-80]
     mov qword[rbp-65], r15
;    free r15
;    alloc r15
     mov r15d, dword[rbp-72]
     mov dword[rbp-57], r15d
;    free r15
;    alloc r15
     mov r15w, word[rbp-68]
     mov word[rbp-53], r15w
;    free r15
;    alloc r15
     mov r15b, byte[rbp-66]
     mov byte[rbp-51], r15b
;    free r15
;  [40:5] assert(obj.pos.x == -1) 
   sub rsp, 80
;  alloc r15
;    [40:12] obj.pos.x == -1
;    [40:12] ? obj.pos.x == -1
;    [40:12] ? obj.pos.x == -1
     cmp_40_12:
     cmp qword[rbp-65], -1
     jne false_40_12
     true_40_12:  ; opt1
     mov r15, 1
     jmp end_40_12
     false_40_12:
     mov r15, 0
     end_40_12:
   push r15
;  free r15
   call assert
   add rsp, 88
;  [41:5] assert(obj.pos.y == -2) 
   sub rsp, 80
;  alloc r15
;    [41:12] obj.pos.y == -2
;    [41:12] ? obj.pos.y == -2
;    [41:12] ? obj.pos.y == -2
     cmp_41_12:
     cmp dword[rbp-57], -2
     jne false_41_12
     true_41_12:  ; opt1
     mov r15, 1
     jmp end_41_12
     false_41_12:
     mov r15, 0
     end_41_12:
   push r15
;  free r15
   call assert
   add rsp, 88
;  [42:5] assert(obj.pos.z == -3) 
   sub rsp, 80
;  alloc r15
;    [42:12] obj.pos.z == -3
;    [42:12] ? obj.pos.z == -3
;    [42:12] ? obj.pos.z == -3
     cmp_42_12:
     cmp word[rbp-53], -3
     jne false_42_12
     true_42_12:  ; opt1
     mov r15, 1
     jmp end_42_12
     false_42_12:
     mov r15, 0
     end_42_12:
   push r15
;  free r15
   call assert
   add rsp, 88
;  [43:5] assert(obj.pos.w == -4) 
   sub rsp, 80
;  alloc r15
;    [43:12] obj.pos.w == -4
;    [43:12] ? obj.pos.w == -4
;    [43:12] ? obj.pos.w == -4
     cmp_43_12:
     cmp byte[rbp-51], -4
     jne false_43_12
     true_43_12:  ; opt1
     mov r15, 1
     jmp end_43_12
     false_43_12:
     mov r15, 0
     end_43_12:
   push r15
;  free r15
   call assert
   add rsp, 88
;  [45:1] # var o2 : object = {p, {-11, -12, -13, -14}, x == 10} 
; main end

; system call: exit 0
mov rax, 60
mov rdi, 0
syscall

; max scratch registers in use: 2
;            max frames in use: 5
