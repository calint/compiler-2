; generated by baz

section .data
align 4

section .bss
align 4
stk resd 256
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

main:
;  [8:5] var a=0xfffffffffffffffe 
;  a: qword[rbp-8]
;  [8:9] a=0xfffffffffffffffe 
;  [8:11] 0xfffffffffffffffe 
;  [8:11] a=0xfffffffffffffffe 
   mov qword[rbp-8],0xfffffffffffffffe
;  [8:30] # -2 
;  [9:5] var b=2*~a 
;  b: qword[rbp-16]
;  [9:9] b=2*~a 
;  [9:11] 2*~a 
;  [9:11] b=2
   mov qword[rbp-16],2
;  [9:14] b*~a 
;  alloc r15
   mov r15,qword[rbp-8]
   not r15
   imul r15,qword[rbp-16]
   mov qword[rbp-16],r15
;  free r15
;  [9:16] # ~a=1 
   if_10_8:
;  [10:8] ? not b=2 
   cmp_10_8:
   cmp qword[rbp-16],2
   je if_10_5_end
   if_10_8_code:  ; opt1
;    [10:16] exit(1)
;    exit(v:reg_rdi) 
;      inline: 10_16
;      alloc rdi
;      alias v -> rdi
       mov rdi,1
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_10_16_end:
   if_10_5_end:
;  [11:5] var c=~a 
;  c: qword[rbp-24]
;  [11:9] c=~a 
;  [11:11] ~a 
;  [11:12] c=~a 
;  alloc r15
   mov r15,qword[rbp-8]
   mov qword[rbp-24],r15
;  free r15
   not qword[rbp-24]
   if_12_8:
;  [12:8] ? not c=1 
   cmp_12_8:
   cmp qword[rbp-24],1
   je if_12_5_end
   if_12_8_code:  ; opt1
;    [12:16] exit(2)
;    exit(v:reg_rdi) 
;      inline: 12_16
;      alloc rdi
;      alias v -> rdi
       mov rdi,2
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_12_16_end:
   if_12_5_end:
;  [13:5] var d=~a--1 
;  d: qword[rbp-32]
;  [13:9] d=~a--1 
;  [13:11] ~a--1 
;  [13:12] d=~a
;  alloc r15
   mov r15,qword[rbp-8]
   mov qword[rbp-32],r15
;  free r15
   not qword[rbp-32]
;  [13:15] d--1 
   sub qword[rbp-32],-1
   if_14_8:
;  [14:8] ? not d=2 
   cmp_14_8:
   cmp qword[rbp-32],2
   je if_14_5_end
   if_14_8_code:  ; opt1
;    [14:16] exit(3)
;    exit(v:reg_rdi) 
;      inline: 14_16
;      alloc rdi
;      alias v -> rdi
       mov rdi,3
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_14_16_end:
   if_14_5_end:
;  [15:5] var e=1 
;  e: qword[rbp-40]
;  [15:9] e=1 
;  [15:11] 1 
;  [15:11] e=1 
   mov qword[rbp-40],1
;  [16:5] var f=~a--e 
;  f: qword[rbp-48]
;  [16:9] f=~a--e 
;  alloc r15
;  [16:11] ~a--e 
;  [16:12] r15=~a
   mov r15,qword[rbp-8]
   not r15
;  [16:15] r15--e 
   add r15,qword[rbp-40]
   mov qword[rbp-48],r15
;  free r15
   if_17_8:
;  [17:8] ? not f=2 
   cmp_17_8:
   cmp qword[rbp-48],2
   je if_17_5_end
   if_17_8_code:  ; opt1
;    [17:16] exit(4)
;    exit(v:reg_rdi) 
;      inline: 17_16
;      alloc rdi
;      alias v -> rdi
       mov rdi,4
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_17_16_end:
   if_17_5_end:
;  [18:5] var g=2 
;  g: qword[rbp-56]
;  [18:9] g=2 
;  [18:11] 2 
;  [18:11] g=2 
   mov qword[rbp-56],2
;  [19:5] var h=g*~a 
;  h: qword[rbp-64]
;  [19:9] h=g*~a 
;  alloc r15
;  [19:11] g*~a 
;  [19:11] r15=g
   mov r15,qword[rbp-56]
;  [19:14] r15*~a 
;  alloc r14
   mov r14,qword[rbp-8]
   not r14
   imul r15,r14
;  free r14
   mov qword[rbp-64],r15
;  free r15
   if_20_8:
;  [20:8] ? not h=2 
   cmp_20_8:
   cmp qword[rbp-64],2
   je if_20_5_end
   if_20_8_code:  ; opt1
;    [20:16] exit(5)
;    exit(v:reg_rdi) 
;      inline: 20_16
;      alloc rdi
;      alias v -> rdi
       mov rdi,5
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_20_16_end:
   if_20_5_end:
;  [21:5] exit(0)
;  exit(v:reg_rdi) 
;    inline: 21_5
;    alloc rdi
;    alias v -> rdi
     mov rdi,0
;    [2:5] mov(rax,60)
     mov rax,60
;    [2:17] # exit system call 
;    [3:5] mov(rdi,v)
;    [3:17] # return code 
;    [4:5] syscall 
     syscall
;    free rdi
   exit_21_5_end:

; max scratch registers in use: 2
;            max frames in use: 5

