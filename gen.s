; generated by baz

true equ 1
false equ 0

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

foo:
;  foo(b:bool):res:bool 
;  res: byte[rbp-1]
;  b: byte[rbp+16]
   push rbp
   mov rbp,rsp
   if_8_8:
;  [8:8] ? b 
;  [8:8] ? b 
   cmp_8_8:
   cmp byte[rbp+16],0
   je if_else_8_5
   jmp if_8_8_code
   if_8_8_code:
;    [8:10] res=false 
;    [8:14] false 
;    [8:14] res=false 
     mov byte[rbp-1],false
   jmp if_8_5_end
   if_else_8_5:
;      [8:25] res=true 
;      [8:29] true 
;      [8:29] res=true 
       mov byte[rbp-1],true
   if_8_5_end:
   movsx rax,byte[rbp-1]
   pop rbp
   ret

main:
;  [12:5] var bt1:i8=1 
;  bt1: byte[rbp-1]
;  [12:9] bt1=1 
;  [12:16] 1 
;  [12:16] bt1=1 
   mov byte[rbp-1],1
;  [13:5] var bt2:i8=2 
;  bt2: byte[rbp-2]
;  [13:9] bt2=2 
;  [13:16] 2 
;  [13:16] bt2=2 
   mov byte[rbp-2],2
;  [15:5] var b1:bool=bt1<bt2 
;  b1: byte[rbp-3]
;  [15:9] b1=bt1<bt2 
;  [15:17] ? bt1<bt2 
;  [15:17] ? bt1<bt2 
   cmp_15_17:
;  alloc r15
   mov r15b,byte[rbp-2]
   cmp byte[rbp-1],r15b
;  free r15
   jge false_15_9
   jmp true_15_9
   true_15_9:
   mov byte[rbp-3],1
   jmp end_15_9
   false_15_9:
   mov byte[rbp-3],0
   end_15_9:
;  [17:5] var b3:bool=foo(b1)
;  b3: byte[rbp-4]
;  [17:9] b3=foo(b1)
;  [17:17] ? foo(b1)
;  [17:17] ? foo(b1)
   cmp_17_17:
;  alloc r15
;    [17:17] foo(b1)
;    [17:17] r15=foo(b1)
;    [17:17] foo(b1)
     sub rsp,4
;    alloc r14
     movsx r14,byte[rbp-3]
     push r14
;    free r14
     call foo
     add rsp,12
     mov r15,rax
   cmp r15,0
;  free r15
   je false_17_9
   jmp true_17_9
   true_17_9:
   mov byte[rbp-4],1
   jmp end_17_9
   false_17_9:
   mov byte[rbp-4],0
   end_17_9:
   if_18_8:
;  [18:8] ? b3 
;  [18:8] ? b3 
   cmp_18_8:
   cmp byte[rbp-4],0
   je if_18_5_end
   jmp if_18_8_code
   if_18_8_code:
;    [18:11] exit(1)
;    exit(v:reg_rdi) 
;      inline: 18_11
;      alloc rdi
;      alias v -> rdi
       mov rdi,1
;      [2:5] mov(rax,60)
       mov rax,60
;      [2:17] # exit system call 
;      [3:5] mov(rdi,v)
;      [3:17] # return code 
;      [4:5] syscall 
       syscall
;      free rdi
     exit_18_11_end:
   if_18_5_end:
;  [20:1] # b3=bt1=1 
;  [21:1] # if not b3 exit(2) 
;  [23:1] # b3=not bt1=1 
;  [24:1] # if b3 exit(3) 
;  [26:5] exit(0)
;  exit(v:reg_rdi) 
;    inline: 26_5
;    alloc rdi
;    alias v -> rdi
     mov rdi,0
;    [2:5] mov(rax,60)
     mov rax,60
;    [2:17] # exit system call 
;    [3:5] mov(rdi,v)
;    [3:17] # return code 
;    [4:5] syscall 
     syscall
;    free rdi
   exit_26_5_end:

; max scratch registers in use: 2
;            max frames in use: 5
