; generated by baz

true equ 1
false equ 0

section .data
align 4

section .bss
align 4
stk resd 1024
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

f:
;  f(x:i8,y:i8):res:bool 
;  res: byte[rbp-1]
;  x: byte[rbp+16]
;  y: byte[rbp+24]
   push rbp
   mov rbp,rsp
;  [8:5] res=x=y 
;  [8:9] ? x=y 
;  [8:9] ? x=y 
   cmp_8_9:
;  alloc r15
   mov r15b,byte[rbp+24]
   cmp byte[rbp+16],r15b
;  free r15
   jne false_8_5
   jmp true_8_5
   true_8_5:
   mov byte[rbp-1],1
   jmp end_8_5
   false_8_5:
   mov byte[rbp-1],0
   end_8_5:
   movsx rax,byte[rbp-1]
   pop rbp
   ret

main:
;  bt1: byte[rbp-1]
;  [16:5] var bt1:i8=1 
;  [16:9] bt1:i8=1 
;  [16:16] 1 
;  [16:16] bt1=1 
   mov byte[rbp-1],1
;  bt2: byte[rbp-2]
;  [17:5] var bt2:i8=2 
;  [17:9] bt2:i8=2 
;  [17:16] 2 
;  [17:16] bt2=2 
   mov byte[rbp-2],2
;  b: byte[rbp-3]
;  [18:5] var b:bool=f(bt1,bt2)
;  [18:9] b:bool=f(bt1,bt2)
;  [18:16] ? f(bt1,bt2)
;  [18:16] ? f(bt1,bt2)
   cmp_18_16:
;  alloc r15
;    [18:16] f(bt1,bt2)
;    [18:16] r15=f(bt1,bt2)
;    [18:16] f(bt1,bt2)
     sub rsp,3
;    alloc r14
     movsx r14,byte[rbp-2]
     push r14
;    free r14
;    alloc r14
     movsx r14,byte[rbp-1]
     push r14
;    free r14
     call f
     add rsp,19
     mov r15,rax
   cmp r15,0
;  free r15
   je false_18_9
   jmp true_18_9
   true_18_9:
   mov byte[rbp-3],1
   jmp end_18_9
   false_18_9:
   mov byte[rbp-3],0
   end_18_9:
;  [20:5] exit(0)
;  exit(v:reg_rdi) 
;    inline: 20_5
;    alloc rdi
;    alias v -> rdi
     mov rdi,0
;    [2:5] mov(rax,60)
     mov rax,60
;    [2:17] # exit system call 
;    [3:5] mov(rdi,v)
;    [3:17] # return code 
;    [4:5] syscall 
     syscall
;    free rdi
   exit_20_5_end:

; max scratch registers in use: 2
;            max frames in use: 4
