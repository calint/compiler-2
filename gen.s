; generated by baz

section .data
align 4

section .bss
align 4
stk resd 256
stk.end:

section .text
align 4
bits 64
global _start
_start:
mov rsp,stk.end
mov rbp,rsp
jmp main

main:
;  [8:5] var a=-2 
;  a: qword[rbp-8]
;  [8:9] a=-2 
;  [8:11] -2 
;  [8:12] a=-2 
   mov qword[rbp-8],-2
;  [9:5] var b=-a 
;  b: qword[rbp-16]
;  [9:9] b=-a 
;  alloc r15
;  [9:11] -a 
;  [9:12] r15=-a 
   mov r15,qword[rbp-8]
   neg r15
   mov qword[rbp-16],r15
;  free r15
;  [10:5] var c=-a-(-b-(-a)+1)
;  c: qword[rbp-24]
;  [10:9] c=-a-(-b-(-a)+1)
;  alloc r15
;  [10:11] -a-(-b-(-a)+1)
;  [10:12] r15=-a
   mov r15,qword[rbp-8]
   neg r15
;  [10:15] r15-(-b-(-a)+1)
;  alloc r14
;  [10:15] (-b-(-a)+1)
;  [10:16] r14=-b
   mov r14,qword[rbp-16]
   neg r14
;  [10:19] r14-(-a)
   add r14,qword[rbp-8]
;  [10:23] r14+1
   add r14,1
   sub r15,r14
;  free r14
   mov qword[rbp-24],r15
;  free r15
   if_11_8:
;  [11:8] ? c=5 
;  [11:8] ? c=5 
   cmp_11_8:
   cmp qword[rbp-24],5
   jne if_11_5_end
   jmp if_11_8_code
   if_11_8_code:
;    [12:9] exit(0)
;    exit(v) 
;      inline: 12_9
;      alias v -> 0
;      [2:5] mov(rbx,v)
       mov rbx,0
;      [3:5] mov(rax,1)
       mov rax,1
;      [4:5] int(0x80)
       int 0x80
     exit_12_9_end:
   if_11_5_end:
;  [13:5] exit(1)
;  exit(v) 
;    inline: 13_5
;    alias v -> 1
;    [2:5] mov(rbx,v)
     mov rbx,1
;    [3:5] mov(rax,1)
     mov rax,1
;    [4:5] int(0x80)
     int 0x80
   exit_13_5_end:

; max scratch registers in use: 2
;            max frames in use: 5
