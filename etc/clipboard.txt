# find duplicate labels
cat gen.s | grep -E '^\s+.*\:'| sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | sort | uniq -d

# tag with time stamp
TAG=$(date "+%Y-%m-%d--%H-%M") && git tag $TAG && git push origin $TAG

# check memory issues
valgrind --tool=memcheck --track-origins=yes ./baz

# check cache utilization
valgrind --tool=cachegrind --cache-sim=yes ./baz

# check peak mem usage
valgrind --tool=massif --massif-out-file=massif.out ./baz >/dev/null 2>/dev/null
grep mem_heap_B massif.out | sort -g | tail -n 1
rm massif.out

# resets current state to HEAD
git reset --hard HEAD

   ; sign extended mov
   movsx rax,byte[rbp-8]
   movsx rax,word[rbp-8]
   movsx rax,dword[rbp-8]

   push rax
   push ax

   push qword[rax]
   push word[rax]

   push byte 1
   push word 1
   push dword 1
   push qword 1


--------------------------
extern printf

section .text
global main
main:
   mov rsi,42
   mov rdi,fmt
   xor rax,rax
   call printf
   ret

section .data
fmt db 'di: %d',10,0
fmt.len equ $-fmt

section .note.GNU-stack noexec
-----------------------------

nasm -f elf64 gen-m.s && gcc -no-pie -o gen-m gen-m.o && ./gen-m


const token&
----------------
copy constructor
constructor
copy constructor
constructor
constructor
move constructor

token move
----------------
constructor
move constructor
move constructor
move constructor
constructor
constructor
move constructor

token copy
----------------
constructor
copy constructor
copy constructor
copy constructor
constructor
constructor
move constructor

To rewrite the expression "not (a=1 and b=2)" without the "not", 
use De Morgan's laws, which state that "not (A and B)" is the same as
"(not A) or (not B)" and "not (A or B)" is the same as "(not A) and (not B)".
Applying this to the given expression, we get:
"not (a=1 and b=2)" is the same as "(not a=1) or (not b=2)"


printf("\033[2J"); // clears console

qa/tests/t6.baz
------------------------------------------------------------
func inline exit(v:reg_rdi){
    mov(rax,60) # exit system call
    mov(rdi,v)  # return code
    syscall
}

func inline main{
    var a=1
    var b=2
    var c=3
    var d=4
    # triggers optimize_jumps_1 and optimize_jumps_2
    if (a=1 and b=2) or (c=3 and d=4)
        exit(0)
    exit(1)
}
-----------------------------------------------------
section .data
    num1 dq 3.14    ; first floating-point number
    num2 dq 2.71    ; second floating-point number
    result dq 0     ; space to store the result

section .text
    global main
    extern printf

main:
    ; Load the two numbers into xmm0 and xmm1 registers
    movsd xmm0, qword[num1]
    movsd xmm1, qword[num2]

    ; Add the two numbers and store the result in xmm0
    addsd xmm0, xmm1

    ; Move the result from xmm0 to the result variable in memory
    movsd qword[result], xmm0

    ; Print the result using printf
    mov rdi, fmt
    movsd xmm0, qword[result]
    call printf

    ; Exit the program
    xor eax, eax
    ret

section .data
    fmt db "Result: %f", 10, 0   ; printf format string
-----------------------------------------------------------
