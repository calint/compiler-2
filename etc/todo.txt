[ ] bool_ops_list: does not throw parsing error:
    var b : bool = (true == false
[ ] tokenizer: handle string with escaped " 
[ ] token: regex construction to static
[ ] considering not parsing multiple return statements
[ ] review bool_ops_list + bool_op parsing considering the whitespaces handling
[ ] tokenizer to keep track of line-number instead of computing it
[ ] consider refactoring to 1 pass compiler making compiling in constructor
    constructor(os data,os code,indent)
[ ] tokenizer, token etc to std::string_view
[ ] implement arrays
[ ] implement strings
[ ] support for float and double?
[ ] rename compiler_exception
[ ] stmt_call: check arguments vs parameters in constructor instead of at compile
[o] check that return value is assigned in functions
    => should check all execution paths to find out if the variable is always assigned
        now it may result in undefined behavior because the compiler checks that
        the return value is set in any branch of execution
[ ] consider mapping execution paths in a tree to find out if a variable is always assigned
[ ] review "//?" comments
[ ] review "todo." comments
[ ] handle constants when deducing operand size 
     => deduce if possible to the size of the desired type
[ ] specify whether ok for an op to truncate value instead of error

-------------------------------------------------------------------------------
stage 5
-------------------------------------------------------------------------------
[ ] function return of non-register passable type
[ ]     var pos : point = foo()
[ ] func f(p : point inout) { p.x = 1 } writes to caller 'p'
[ ] func f(p : point copy) copies point to callee stack
[ ] func f(p : point const) const is default. same as "func f(p : point)"
[ ] func object(self : object inout, pos, vel, color) called when 'var o : object = {...}'
[ ] func foo(object& self, arg) can be called with o.foo(arg)
[ ] string type
[ ]   var str = "hello world"
[ ]   var len = str.len
[ ] var points : point[10] = {{1, 2}, {3, 4}}
[ ]   points[1].x = 1
[ ]   points.len
[ ] multiple return values: func f() : point pos, point vel { ... }
[ ]    var p,v = f()
[ ] consider cmovxx when evaluating a boolean expression
[ ] floating point numbers
[ ] func f(p : point) {} ... f({x, y})
[ ] expr_any: deduce expression type to bool or numbers
[ ]   is_const, is_bool_expression, is_number_expression
[ ] let i=1 creates a constant
[ ] def table{x,y,z}
[ ] token.compile assumes is_str is field (db)
[ ]   review fragile implementation
[ ] include source file: i.e. "include io" includes io.baz
[ ] inlined function call: if a named register is not available: push/pop?
[ ] post processing optimization for: var b=-(-a*-a)
      mov r15,qword[rbp-8]
      neg r15
      neg r15
      mov qword[rbp-16],r15
[ ] why is the binary so big although in-line is turned off in make.sh?

-------------------------------------------------------------------------------
resolved ([x]: done [-]: not completed with reason specified)
-------------------------------------------------------------------------------
[-] stmt_call: enable nested use of named registers
      example: f(x+1,x) where x is argument that was passed through register and the
      first argument to f is the same register then the second argument is clobbered
[-]   non-inlined
[x]   inlined
[-] optimize stack adjustment between calls
      call bar
      add rsp,40
      sub rsp,24
      call foo
      => obsoleted since only in-lined functions allowed
[-] optimize return pattern:
       mov qword[rbp-8],r15
       mov rax,qword[rbp-8]
       pop rbp
       ret
    to
       mov rax,r15
       pop rbp
       ret
      => obsoleted since only in-lined functions allowed
[-] stmt_call: use std::source_location in panic exception
    => string in exception is unique
[-] unary_ops: use std::source_location in panic exception
    => string in exception is unique
[x] fix 'cmp' with left hand side constant 
    => moves lhs to register and makes compilation. todo: if lhs and rhs are constants evaluate
       at compile time
       => the if does the constant evaluation never reaching cmp assembler command
[x] expr_ops_list: does calculate e*b/a + (b % (-a)) 
    fix t47.baz:
    c = a - e*b/a + (b % (-a))
    if not c==4 exit(17)
    => c = (a - e*b/a) + (b % (-a))  ok
       c = a - e*b/a + (b % (-a)) not ok
       expr_ops_list does:
       c = a - (   e*b/a + (b % (-a))  ) 
[x] bool_ops_list fix:
    var t1 = 5
    var t2 = 5
    var t3 = 10
    var t4 = 2
    var t5 : bool = false
    var h9 : bool = not ( (t1 + t2 + t3 + t4) > 20 and not t5 ) and (t3 / 5 > 1 or t4 / 1 == 2)
[x] bool_ops_list: there can be no spaces between ( () )
[x] find out why toc.source_comment does not remove trailing spaces
[x] var u : bool = not ( (false or true) and not (true and false) ) or (x > 10)
                 => false
[x] t69.baz has commented samples that break baz
[x] refactor parsing of bool_ops_list and check compilation:
    => don't allow mixing of 'or's and 'and's without parenthesis greatly
       reduces the complexity. (same like in C++)
[x] var w : bool = (x + y <= z) and (not (z == 4) or (x == 1 and y == 3))
[x] bool_ops_list:
    var r : bool = (x + y <= z)  and (not (z == 4) or (x == 1 and y == 3))
[x] toc: review the is_variable_initiated and set_variable_initiated
        case '<': // shift left
        case '>': // shift right
            return 4;
    regarding registers (get_id_and_frame_for_identifier is dubious)
[x] consider removing support for non-inlined functions because it is out of scope
    => intention of program is super-loop non-reentrant inlined functions
[x] replace all {0} and {false} to default {}
[x] make auto for all functions with trailing return
[x] better format
[x] adjust for neovim clangd development
[x] type.hpp:66: why by reference in: const string &memsize{get_memory_operand_for_size(tk, tp_first_field->size())}
    => get_memory_operand_for_size now returns const std::string&
[-] allow non-register types to functions
    => pass address to argument through stack
[-] allow return types to be non-registers
    => pass address to return through stack 
[x] replace endl with '\n'
[x] consider disabling function definitions and calls without ()
[x] calculate stack size at compile time instead of hardcoded
[x]   calculate max stack size used
[x] fix 'cmp' with left hand side constant => compilation error instead of further complications
    => "if 1 + 1 == x" is not considered constant because expr_ops_list does not support
        constant evaluation 
[x] change vector indexing to safer .at(i)
[-] pointers?
    => try without
[x] toc: rename baz_ident
    => identifier
[x] clean-up:
[x]     toc
[x]     statement
[x]     stmt_return
[x]     stmt_breaks
[x]     stmt_continue
[x]     stmt_loop
[x]     stmt_comment
[x]     stmt_block
[x]     stmt_if
[x]     stmt_if_branch
[x]     stmt_def_var
[x]     stmt_assign_var
[x]     stmt_def_field
[x]     stmt_def_type
[x]     stmt_def_type_field
[x]     expression
[x]     expr_any
[x]     expr_type_value
[x]     call_asm: deleted
[x]     call_asm_syscall
[x]     call_asm_mov
[x]     compiler_exception
[x]     panic_exception
[x]     decouple.hpp
[x]     stmt_def_func
[x]     stmt_def_func_param
[x]     stmt_call
[x]     expr_ops_list
[x]     bool_op
[x]     bool_ops_list (the 'not' and sub-expressions makes it complex)
[x]     unary_ops
[x]     tokenizer
[x]     token
[x]     lut
[x]     main.cpp[x] review new code
[x] "#comment" should be accepted as "# comment"
[-] process generated asm to remove duplicate labels
    => was error in bool_ops_list
[x] coverage: bool_ops_list
[x] coverage: stmt_call
[-] func f() : point p { p = {1, 2} }
[-]    var pos : point = f()
[-]     where p refers into caller stack (rbp+xx)
    => does not work for non-inlined functions, stack is unknown, depending on caller context
[-] function arguments relative to rsp allowing writing to variable in previous function context
    => non-inlined functions don't know the stack of caller regarding how many registers where saved on the stack
[x] review main.cpp move of tokens and unary_ops
[x] modernize: pass by value and move
[x] main:create_statement_from_tokenizer review move(tk) ..
[x] var v : vector = {1, a + b, f() - 1}
[x] var o:object={{1,2},{0,0},1}
[x] o.pos = v
[x] expr_ops_list: more coverage
    => t65
[x] qa/t63 sometimes fails when run in batch. examine t63.py
    => error in t63.py
[x] f(a==1) where argument is a boolean
[x] type size{value}, var s:size=1, s.value=2 == s=2 
[x] type point{x,y}
[-] var p:point{1,2}
[-] p=point(1,2)
[x] p.x=1 == p=1
    => type point{x,y}
[x] function argument types
[x] built-in types
[x]   var b:bool=false
[x]   var c:i8=0
[x]   var w:i16=0
[x]   var d:i32=0
[x]   var q:i64=0   var q=0  i64 is default
[-]   var x=c+w+d+q gives error, not matching types, no implicit conversion
[x]      built-in integer (registers) allowed to size up to 'i64'
[-]   var x=i8(c)+i16(w)+i32(w)+i64(d): deduced size i64
[x]   var c=i gives error, source type size is larger than destination
[x] user defined types
[-]   typedef size i64?  alias size i64?
[-]     var i=1 var s=size(i) i=s gives error i=quad(s) 
[x]   type vector{x,y} type object{pos:vector,vel:vector,color:i8}
[-]     var o=object({1,2},{0,0},1)
[-] bool_op_list use cmovexx when assignment
    => simplicity trumps complexity of generating the assembler
[x] better coverage of bool_op. qa/see coverage-report
[x] source location of a character index counts tabs as one character
    => editor set to treat tabs as spaces
[x] clang-format everything for less dense code?
    => visual code formatter
[x] review the declaration of default move,copy,constructor in every class
     -> although redundant it declares intention. keep.
[x] fix 'cmp' two constants case
      -> messy code that does dead-code elimination
[x] bool_op: implement !=
[x] use expr_any in stmt_assign_var
[-] bool_op: implement ! (logical not) -> same as "not a"
[x] clean-up: consistent function arguments names
[x] toc.allocate_named_register_or_break: if allocated then tell where
[x] toc.add_field: if defined tell where
[x] toc.add_function: if defined tell where
[x] toc.add_var: if defined tell where
[x] toc.add_var(...) check if name shadows -> consider in-lined functions
[-] examine expression, expr_ops_list, stmt_call relation
[-]   circular reference stmt_call -> expr_ops_list -> stmt_call
[-] decouple by implementing functions that cause circular references in decouple.cpp
[-]    block -> if,loop -> block
[-]    block -> call (in-lined) -> block
[-]    cannot without making field in declaration of 'if' and 'loop' to unique_ptr<stmt_block>
[x] make sub lists taking in account precedence of 'and' over 'or'
      i.e. 'a or b and c or d' -> 'a or (b and c) or d'
[x]   review/remake messy code -> messy but readable and simple
[-] token.is_empty maybe same as is_name("") instead of considering whitespaces
    -> stmt_block depends on is_empty() considering whitespaces also
[x] short-hand boolean expression i.e. if a or b
[x] compile error when i.e.:
      var b=-b-(-1) # b is used before initiated
[x] expr_ops_list: div: push/pop rax,rdx if not allocatable
[x] expr_ops_list: shift: push/pop rcx if not allocatable
[-] expr_ops_list: src.get_unary_ops().get_ops_as_string()+src_r.id -> src.as_const()
    -> resolved identifier might differ from src.identifier
[-] compile for pczero task -> pczero is 32bit
[x] negated sub-expression. i.e. 'not (a=1 and b=2)'
[x]   review
[x] unary decoration parsed prior to any statement. i.e. '~-a', '~-f(o)'
[x]   review
[x] bitwise logical ops: & | ^
[x]   review
[x] op shift left and right
[x]   review
[x] implement division op
[x]   review
[x] stmt_call::vector<expr_ops_list> instead of unique pointer
    -> tag prior refactoring 2023-04-19--8--checkpoint
[x] negated expression
[x]   support for negated expr_ops_list. i.e. a=-(1+2)
[x]   review
[x] review fragile optimze_jumps_x
[-] stmt_if_branch.code_ can be value instead of unique_ptr
    -> circular reference?
[x] statement.parent can be removed
[x] experiments with linking to the standard c library and using printf
[x] review stmt_call
[x] when calling non-inlined functions the allocated register is pushed and popped
    although it hasn't been assigned. keep track of that in toc and optimize away
    the push/pop
[x] all allocated registers pushed before a call not necessary
[x] registers get clobbered in non-inlined functions
[x] rax gets clobbered in recursive functions
[x] non-inlined function calls
[x]   review
[-]     rbp=rsp before pushing arguments and at the beginning of functions
          can be optimized if nasm ident not hard-coded [rbp+...]
        example: "rbp" or "rsp" as argument to toc.nasm_ident(ident,"rbp",displacement)
          where displacement is used when pushing arguments to compensate for the moving rsp
[x] keyword 'inline'. func inline foo()...
[x] fix generated code of "if (a=1 and b=2) or (c=3 and d=4)"
        jne cmp_14_26
        jmp if_14_8_code
        cmp_14_26:
     possibly with a post processor of nasm file
        je if_14_8_code
        cmp_14_26:
[x]   review fragile implementation
[x] fix generated code
        jmp cmp_13_26
        cmp_13_26:
[x] review the ugly 'if' code
[x] variant instead of stmt_if_bool_op_list extends stmt_if_bool_op
[x] assembler 64 bit code
[x] return statement for in-lined
[x] optimize:
        mov edi,dword[ebp+16]
        sub edi,1
        mov dword[ebp+16],edi
      to
        sub dword[ebp+16],1
[x] optimize: r=a+b+c+d
     ;  [12:11] r=a
        mov edi,dword[ebp+0]
        mov dword[ebp+16],edi
     ;  [12:13] r+b
        mov edi,dword[ebp+4]
        add dword[ebp+16],edi
     ;  [12:15] r+c
        mov edi,dword[ebp+8]
        add dword[ebp+16],edi
     ;  [12:17] r+d 
        mov edi,dword[ebp+12]
        add dword[ebp+16],edi
[x] stmt_assign_var.compile
      -> try evaluation with scratch register and evaluation without scratch register
         select the one that generates fewest instructions
