func exit(v : reg_rdi) {
    mov(rax, 60)  # exit system call
    mov(rdi, v)   # return code
    syscall()
}

func assert(expr : bool) {
    if not expr exit(1)
}

func print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall()
}

func read(len : reg_rdx, ptr : reg_rsi) : i64 nbytes {
    mov(rax, 0)   # read system call
    mov(rdi, 0)   # file descriptor for standard input
    mov(rsi, ptr) # buffer address
    mov(rdx, len) # buffer size
    syscall()
    mov(nbytes, rax) # return value
}

func print_num(num) {
    var buf : i8[16]
    var i = 0 
    var num_iter = num
    loop {
       var rest = num_iter / 10
       var digit = num_iter % 10
       buf[i] = 48 + digit
       i = i + 1
       if rest == 0 break
       num_iter = rest
    }
    var len = i
#    var j = i
#    i = 0
#    var rev : i8[16]
#    loop {
#      j = j - 1
#      rev[i] = buf[j]
#      i = i + 1
#      if j == 0 break
#    }
    print(len, address_of(buf))
}

func main() {
  var x = 0
  x = 10 / 10
  var nl : i8[1]
  nl[0] = 10
  var i1 = 1
  var i2 : i32 = 2
  var i3 : i16 = 3
  var i4 : i8 = 4
  
  print_num(i1)
  print(1, address_of(nl))
#  print_num(i2)
#  print(1, address_of(nl))
#  print_num(i3)
#  print(1, address_of(nl))
#  print_num(i4)
#  print(1, address_of(nl))
}
