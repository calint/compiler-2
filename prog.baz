field   hello = "hello world from baz\n"
field   input = "............................................................"
field prompt1 = "enter name: "
field prompt2 = "that is not a name.\n"
field prompt3 = "hello "
field      nl = "\n"
field     dot = "."

func inline exit(v : reg_rdi) {
    mov(rax, 60) # exit system call
    mov(rdi, v)  # return code
    syscall
}

func inline print(len : reg_rdx, ptr : reg_rsi) {
    mov(rax, 1)   # write system call
    mov(rdi, 1)   # file descriptor for standard out
    mov(rsi, ptr) # buffer address 
    mov(rdx, len) # buffer size
    syscall
}

func inline read(len : reg_rdx, ptr : reg_rsi) : nbytes_read {
    mov(rax, 0)    # read system call
    mov(rdi, 0)    # file descriptor for standard input
    mov(rsi, ptr)  # buffer address
    mov(rdx, len)  # buffer size
    syscall
    mov(nbytes_read, rax) # return value
}

# define a type 'vector'
#   member 'x' being default size (64 bit)
#   member 'y' being 32 bit
#   member 'z' being 16 bit
#   member 'w' being 8 bit
#   member 'valid' being a boolean
type vector { x, y : i32, z : i16, w : i8, valid : bool }

func inline main {
    # declare 'v' on the stack
    var v : vector = 3    # v.x is set to 3
    v.y = 4
    v.z = 5
    v.w = 6
    v.valid = true

    # check if valid
    if not v.valid exit(1)

    print(hello.len, hello)
    loop {
        print(prompt1.len, prompt1)
        var len = read(input.len, input) - 1    # -1 don't include the '\n'
        if len == 0 {
            break
        }
        if len <= v.x {
            print(prompt2.len, prompt2)
            continue
        }
        print(prompt3.len, prompt3)
        print(len, input)
        print(dot.len, dot)
        print(nl.len, nl)
    }
}
