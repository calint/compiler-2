[ ] clean-up: consistent variable names
[ ] review the the declaration of default move,copy,constructor in every class
[ ] source location of a character index counts tabs as one character
stage 4
[ ] handle constants when deducing operand size
[ ] specify whether ok for an op to truncate value instead of only exception
[x] function argument types
[o] built-in types
[ ]   var b:bool=true
[x]   var c:byte=0
[x]   var c:word=0
[x]   var d:dword=0
[x]   var i:qword=0   var i=0  qword is default
[x]   var x=c+w+d gives error, not matching types, no implicit conversion
[ ]   var x=qword(c)+quad(w)+quad(d)
[x]   var c=i gives error, source type size is larger than destination
[x] user defined types
[-]   'typedef' size qword?  'alias' size qword
[-]     var i=1 var s=size(i) i=s gives error i=quad(s) 
[x]   type vector{x,y} type object{pos:vector,vel:vector,color:i8}
[ ]     var o:object={{1,2},{0,0},1}
[ ]     var o=object({1,2},{0,0},1)
[ ]   func object(self,pos,vel,color)
[x]   type size{value}, var s:size=1Â¨, s.value=2 == s=2 
[x]   type point{x,y}
[ ]   var p:point{1,2}
[-]   p=point(1,2)
[x]   p.x=1 == p=1
      ->type point{x,y}
[ ] let i=1 creates a constant
[ ] f(a=1) where argument is a boolean
[ ] function arguments as references
[ ] function return written to reference
[ ] string type
[ ] var str="hello world"
[ ] var len=str.len
[ ] def table{x,y,z}
[ ] pointers?
[ ] var points=point[10] where points contains length of array and a pointer
[ ] multiple return values assignment: var a,b=foo()  a,b=foo()
[ ] fix 'cmp' two constants case
[ ] tokenizer to keep track of line-number instead of computing it
[ ] token.compile assumes is_str is field (db)
[ ]   review fragile implementation
[ ] include source file: i.e. "include io" includes io.baz
[ ] inlined function call: if a named register is not available: push/pop?
[ ] stmt_call: enable nested use of named registers
      example: f(x+1,x) where x is argument that was passed through register and the
      first argument to f is the same register then the second argument is clobbered
[ ]   non-inlined
[ ]   inlined
[ ] post processing optimization for: var b=-(-a*-a)
      mov r15,qword[rbp-8]
      neg r15
      neg r15
      mov qword[rbp-16],r15
[ ] optimize return pattern:
       mov qword[rbp-8],r15
       mov rax,qword[rbp-8]
       pop rbp
       ret
    to
       mov rax,r15
       pop rbp
       ret
[ ] optimize stack adjustment between calls
      call bar
      add rsp,40
      sub rsp,24
      call foo
[ ] why is the binary so big although in-line is turned off in make.sh?
[ ] clang-format everything for less dense code?
-------------------------------------------------------------------------------
[x] clean-up: consistent function arguments names
[x] toc.allocate_named_register_or_break: if allocated then tell where
[x] toc.add_field: if defined tell where
[x] toc.add_function: if defined tell where
[x] toc.add_var: if defined tell where
[x] toc.add_var(...) check if name shadows -> consider in-lined functions
[-] examine expression, expr_ops_list, stmt_call relation
[-]   circular reference stmt_call -> expr_ops_list -> stmt_call
[-] decouple by implementing functions that cause circular references in decouple.cpp
[-]    block -> if,loop -> block
[-]    block -> call (in-lined) -> block
[-]    cannot without making field in declaration of 'if' and 'loop' to unique_ptr<stmt_block>
[x] make sub lists taking in account precedence of 'and' over 'or'
      i.e. 'a or b and c or d' -> 'a or (b and c) or d'
[x]   review/remake messy code -> messy but readable and simple
[-] token.is_empty maybe same as is_name("") instead of considering whitespaces
    -> stmt_block depends on is_empty() considering whitespaces also
[x] short-hand boolean expression i.e. if a or b
[x] compile error when i.e.:
      var b=-b-(-1) # b is used before initiated
[x] expr_ops_list: div: push/pop rax,rdx if not allocatable
[x] expr_ops_list: shift: push/pop rcx if not allocatable
[-] expr_ops_list: src.get_unary_ops().get_ops_as_string()+src_r.id -> src.as_const()
    -> resolved identifier might differ from src.identifier
[-] compile for pczero task -> pczero is 32bit
[x] negated sub-expression. i.e. 'not (a=1 and b=2)'
[x]   review
[x] unary decoration parsed prior to any statement. i.e. '~-a', '~-f(o)'
[x]   review
[x] bitwise logical ops: & | ^
[x]   review
[x] op shift left and right
[x]   review
[x] implement division op
[x]   review
[x] stmt_call::vector<expr_ops_list> instead of unique pointer
    -> tag prior refactoring 2023-04-19--8--checkpoint
[x] negated expression
[x]   support for negated expr_ops_list. i.e. a=-(1+2)
[x]   review
[x] review fragile optimze_jumps_x
[-] stmt_if_branch.code_ can be value instead of unique_ptr
    -> circular reference?
[x] statement.parent can be removed
[x] experiments with linking to the standard c library and using printf
[x] review stmt_call
[x] when calling non-inlined functions the allocated register is pushed and popped
    although it hasn't been assigned. keep track of that in toc and optimize away
    the push/pop
[x] all allocated registers pushed before a call not necessary
[x] registers get clobbered in non-inlined functions
[x] rax gets clobbered in recursive functions
[x] non-inlined function calls
[x]   review
[-]     rbp=rsp before pushing arguments and at the beginning of functions
          can be optimized if nasm ident not hard-coded [rbp+...]
        example: "rbp" or "rsp" as argument to toc.nasm_ident(ident,"rbp",displacement)
          where displacement is used when pushing arguments to compensate for the moving rsp
[x] keyword 'inline'. func inline foo()...
[x] fix generated code of "if (a=1 and b=2) or (c=3 and d=4)"
        jne cmp_14_26
        jmp if_14_8_code
        cmp_14_26:
     possibly with a post processor of nasm file
        je if_14_8_code
        cmp_14_26:
[ ]   review fragile implementation
[x] fix generated code
        jmp cmp_13_26
        cmp_13_26:
[x] review the ugly 'if' code
[x] variant instead of stmt_if_bool_op_list extends stmt_if_bool_op
[x] assembler 64 bit code
[x] return statement for in-lined
[x] optimize:
        mov edi,dword[ebp+16]
        sub edi,1
        mov dword[ebp+16],edi
      to
        sub dword[ebp+16],1
[x] optimize: r=a+b+c+d
     ;  [12:11] r=a
        mov edi,dword[ebp+0]
        mov dword[ebp+16],edi
     ;  [12:13] r+b
        mov edi,dword[ebp+4]
        add dword[ebp+16],edi
     ;  [12:15] r+c
        mov edi,dword[ebp+8]
        add dword[ebp+16],edi
     ;  [12:17] r+d 
        mov edi,dword[ebp+12]
        add dword[ebp+16],edi
[x] stmt_assign_var.compile
      -> try evaluation with scratch register and evaluation without scratch register
         select the one that generates fewest instructions
